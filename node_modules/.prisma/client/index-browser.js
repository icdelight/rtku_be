
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.11.1
 * Query Engine version: 1a2506facaf1a4727b7c26850735e88ec779dee9
 */
Prisma.prismaVersion = {
  client: "3.11.1",
  engine: "1a2506facaf1a4727b7c26850735e88ec779dee9"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.Tbl_usersScalarFieldEnum = makeEnum({
  id_user: 'id_user',
  name: 'name',
  pass: 'pass',
  flag_active: 'flag_active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  firstName: 'firstName',
  lastName: 'lastName',
  apps: 'apps',
  role: 'role',
  id_area: 'id_area',
  id_sub_area: 'id_sub_area'
});

exports.Prisma.Tbl_menuScalarFieldEnum = makeEnum({
  id_menu: 'id_menu',
  menu_name: 'menu_name',
  menu_link: 'menu_link',
  role: 'role'
});

exports.Prisma.Tbl_goalsScalarFieldEnum = makeEnum({
  id_goals: 'id_goals',
  issue_goals: 'issue_goals',
  title_goals: 'title_goals',
  desc_goals: 'desc_goals',
  pic_goals: 'pic_goals',
  start_date: 'start_date',
  due_date: 'due_date',
  status_goals: 'status_goals',
  progress: 'progress',
  parent_goals: 'parent_goals',
  type_goals: 'type_goals',
  last_modified_date: 'last_modified_date',
  indikator: 'indikator',
  id_area: 'id_area',
  kodefikasi: 'kodefikasi',
  parent_family: 'parent_family',
  id_cluster: 'id_cluster'
});

exports.Prisma.Mst_areaScalarFieldEnum = makeEnum({
  id_area: 'id_area',
  id_sub_area: 'id_sub_area',
  desc_area: 'desc_area',
  desc_sub_area: 'desc_sub_area',
  id_parent_area: 'id_parent_area',
  active: 'active'
});

exports.Prisma.Tbl_clusterScalarFieldEnum = makeEnum({
  id_cluster: 'id_cluster',
  nama_cluster: 'nama_cluster',
  id_area: 'id_area',
  flag_active: 'flag_active',
  createdAt: 'createdAt',
  modifiedAt: 'modifiedAt',
  id_sub_areas: 'id_sub_areas'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.NullableJsonNullValueInput = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull',
  AnyNull: 'AnyNull'
});


exports.Prisma.ModelName = makeEnum({
  tbl_users: 'tbl_users',
  tbl_menu: 'tbl_menu',
  tbl_goals: 'tbl_goals',
  mst_area: 'mst_area',
  tbl_cluster: 'tbl_cluster'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
