
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model tbl_users
 * 
 */
export type tbl_users = {
  id_user: number
  name: string | null
  pass: string | null
  flag_active: boolean | null
  createdAt: Date
  updatedAt: Date
  firstName: string | null
  lastName: string | null
  apps: string | null
  role: string | null
  id_area: number | null
  id_sub_area: number | null
}

/**
 * Model tbl_menu
 * 
 */
export type tbl_menu = {
  id_menu: number
  menu_name: string | null
  menu_link: string | null
  role: string | null
}

/**
 * Model tbl_goals
 * 
 */
export type tbl_goals = {
  id_goals: number
  issue_goals: string | null
  title_goals: string | null
  desc_goals: string | null
  pic_goals: string | null
  start_date: Date | null
  due_date: Date | null
  status_goals: number | null
  progress: number | null
  parent_goals: number | null
  type_goals: Prisma.JsonValue | null
  last_modified_date: Date | null
  indikator: Prisma.JsonValue | null
  id_area: number | null
  kodefikasi: string | null
  parent_family: number | null
  id_cluster: number | null
}

/**
 * Model mst_area
 * 
 */
export type mst_area = {
  id_area: number
  id_sub_area: number
  desc_area: string | null
  desc_sub_area: string | null
  id_parent_area: number | null
  active: number | null
}

/**
 * Model tbl_cluster
 * 
 */
export type tbl_cluster = {
  id_cluster: number
  nama_cluster: string | null
  id_area: number | null
  flag_active: number | null
  createdAt: Date | null
  modifiedAt: Date | null
  id_sub_areas: string | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Tbl_users
 * const tbl_users = await prisma.tbl_users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Tbl_users
   * const tbl_users = await prisma.tbl_users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.tbl_users`: Exposes CRUD operations for the **tbl_users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tbl_users
    * const tbl_users = await prisma.tbl_users.findMany()
    * ```
    */
  get tbl_users(): Prisma.tbl_usersDelegate<GlobalReject>;

  /**
   * `prisma.tbl_menu`: Exposes CRUD operations for the **tbl_menu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tbl_menus
    * const tbl_menus = await prisma.tbl_menu.findMany()
    * ```
    */
  get tbl_menu(): Prisma.tbl_menuDelegate<GlobalReject>;

  /**
   * `prisma.tbl_goals`: Exposes CRUD operations for the **tbl_goals** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tbl_goals
    * const tbl_goals = await prisma.tbl_goals.findMany()
    * ```
    */
  get tbl_goals(): Prisma.tbl_goalsDelegate<GlobalReject>;

  /**
   * `prisma.mst_area`: Exposes CRUD operations for the **mst_area** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mst_areas
    * const mst_areas = await prisma.mst_area.findMany()
    * ```
    */
  get mst_area(): Prisma.mst_areaDelegate<GlobalReject>;

  /**
   * `prisma.tbl_cluster`: Exposes CRUD operations for the **tbl_cluster** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tbl_clusters
    * const tbl_clusters = await prisma.tbl_cluster.findMany()
    * ```
    */
  get tbl_cluster(): Prisma.tbl_clusterDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.11.1
   * Query Engine version: 1a2506facaf1a4727b7c26850735e88ec779dee9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    tbl_users: 'tbl_users',
    tbl_menu: 'tbl_menu',
    tbl_goals: 'tbl_goals',
    mst_area: 'mst_area',
    tbl_cluster: 'tbl_cluster'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type Tbl_clusterCountOutputType
   */


  export type Tbl_clusterCountOutputType = {
    tbl_goals: number
  }

  export type Tbl_clusterCountOutputTypeSelect = {
    tbl_goals?: boolean
  }

  export type Tbl_clusterCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Tbl_clusterCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Tbl_clusterCountOutputType
    : S extends undefined
    ? never
    : S extends Tbl_clusterCountOutputTypeArgs
    ?'include' extends U
    ? Tbl_clusterCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Tbl_clusterCountOutputType ? Tbl_clusterCountOutputType[P] : never
  } 
    : Tbl_clusterCountOutputType
  : Tbl_clusterCountOutputType




  // Custom InputTypes

  /**
   * Tbl_clusterCountOutputType without action
   */
  export type Tbl_clusterCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Tbl_clusterCountOutputType
     * 
    **/
    select?: Tbl_clusterCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model tbl_users
   */


  export type AggregateTbl_users = {
    _count: Tbl_usersCountAggregateOutputType | null
    _avg: Tbl_usersAvgAggregateOutputType | null
    _sum: Tbl_usersSumAggregateOutputType | null
    _min: Tbl_usersMinAggregateOutputType | null
    _max: Tbl_usersMaxAggregateOutputType | null
  }

  export type Tbl_usersAvgAggregateOutputType = {
    id_user: number | null
    id_area: number | null
    id_sub_area: number | null
  }

  export type Tbl_usersSumAggregateOutputType = {
    id_user: number | null
    id_area: number | null
    id_sub_area: number | null
  }

  export type Tbl_usersMinAggregateOutputType = {
    id_user: number | null
    name: string | null
    pass: string | null
    flag_active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    firstName: string | null
    lastName: string | null
    apps: string | null
    role: string | null
    id_area: number | null
    id_sub_area: number | null
  }

  export type Tbl_usersMaxAggregateOutputType = {
    id_user: number | null
    name: string | null
    pass: string | null
    flag_active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    firstName: string | null
    lastName: string | null
    apps: string | null
    role: string | null
    id_area: number | null
    id_sub_area: number | null
  }

  export type Tbl_usersCountAggregateOutputType = {
    id_user: number
    name: number
    pass: number
    flag_active: number
    createdAt: number
    updatedAt: number
    firstName: number
    lastName: number
    apps: number
    role: number
    id_area: number
    id_sub_area: number
    _all: number
  }


  export type Tbl_usersAvgAggregateInputType = {
    id_user?: true
    id_area?: true
    id_sub_area?: true
  }

  export type Tbl_usersSumAggregateInputType = {
    id_user?: true
    id_area?: true
    id_sub_area?: true
  }

  export type Tbl_usersMinAggregateInputType = {
    id_user?: true
    name?: true
    pass?: true
    flag_active?: true
    createdAt?: true
    updatedAt?: true
    firstName?: true
    lastName?: true
    apps?: true
    role?: true
    id_area?: true
    id_sub_area?: true
  }

  export type Tbl_usersMaxAggregateInputType = {
    id_user?: true
    name?: true
    pass?: true
    flag_active?: true
    createdAt?: true
    updatedAt?: true
    firstName?: true
    lastName?: true
    apps?: true
    role?: true
    id_area?: true
    id_sub_area?: true
  }

  export type Tbl_usersCountAggregateInputType = {
    id_user?: true
    name?: true
    pass?: true
    flag_active?: true
    createdAt?: true
    updatedAt?: true
    firstName?: true
    lastName?: true
    apps?: true
    role?: true
    id_area?: true
    id_sub_area?: true
    _all?: true
  }

  export type Tbl_usersAggregateArgs = {
    /**
     * Filter which tbl_users to aggregate.
     * 
    **/
    where?: tbl_usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_users to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: tbl_usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbl_users
    **/
    _count?: true | Tbl_usersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Tbl_usersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Tbl_usersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Tbl_usersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Tbl_usersMaxAggregateInputType
  }

  export type GetTbl_usersAggregateType<T extends Tbl_usersAggregateArgs> = {
        [P in keyof T & keyof AggregateTbl_users]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbl_users[P]>
      : GetScalarType<T[P], AggregateTbl_users[P]>
  }




  export type Tbl_usersGroupByArgs = {
    where?: tbl_usersWhereInput
    orderBy?: Enumerable<tbl_usersOrderByWithAggregationInput>
    by: Array<Tbl_usersScalarFieldEnum>
    having?: tbl_usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Tbl_usersCountAggregateInputType | true
    _avg?: Tbl_usersAvgAggregateInputType
    _sum?: Tbl_usersSumAggregateInputType
    _min?: Tbl_usersMinAggregateInputType
    _max?: Tbl_usersMaxAggregateInputType
  }


  export type Tbl_usersGroupByOutputType = {
    id_user: number
    name: string | null
    pass: string | null
    flag_active: boolean | null
    createdAt: Date
    updatedAt: Date
    firstName: string | null
    lastName: string | null
    apps: string | null
    role: string | null
    id_area: number | null
    id_sub_area: number | null
    _count: Tbl_usersCountAggregateOutputType | null
    _avg: Tbl_usersAvgAggregateOutputType | null
    _sum: Tbl_usersSumAggregateOutputType | null
    _min: Tbl_usersMinAggregateOutputType | null
    _max: Tbl_usersMaxAggregateOutputType | null
  }

  type GetTbl_usersGroupByPayload<T extends Tbl_usersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Tbl_usersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Tbl_usersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Tbl_usersGroupByOutputType[P]>
            : GetScalarType<T[P], Tbl_usersGroupByOutputType[P]>
        }
      >
    >


  export type tbl_usersSelect = {
    id_user?: boolean
    name?: boolean
    pass?: boolean
    flag_active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    firstName?: boolean
    lastName?: boolean
    apps?: boolean
    role?: boolean
    id_area?: boolean
    id_sub_area?: boolean
  }

  export type tbl_usersGetPayload<
    S extends boolean | null | undefined | tbl_usersArgs,
    U = keyof S
      > = S extends true
        ? tbl_users
    : S extends undefined
    ? never
    : S extends tbl_usersArgs | tbl_usersFindManyArgs
    ?'include' extends U
    ? tbl_users 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof tbl_users ? tbl_users[P] : never
  } 
    : tbl_users
  : tbl_users


  type tbl_usersCountArgs = Merge<
    Omit<tbl_usersFindManyArgs, 'select' | 'include'> & {
      select?: Tbl_usersCountAggregateInputType | true
    }
  >

  export interface tbl_usersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Tbl_users that matches the filter.
     * @param {tbl_usersFindUniqueArgs} args - Arguments to find a Tbl_users
     * @example
     * // Get one Tbl_users
     * const tbl_users = await prisma.tbl_users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbl_usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbl_usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbl_users'> extends True ? CheckSelect<T, Prisma__tbl_usersClient<tbl_users>, Prisma__tbl_usersClient<tbl_usersGetPayload<T>>> : CheckSelect<T, Prisma__tbl_usersClient<tbl_users | null >, Prisma__tbl_usersClient<tbl_usersGetPayload<T> | null >>

    /**
     * Find the first Tbl_users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_usersFindFirstArgs} args - Arguments to find a Tbl_users
     * @example
     * // Get one Tbl_users
     * const tbl_users = await prisma.tbl_users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbl_usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbl_usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbl_users'> extends True ? CheckSelect<T, Prisma__tbl_usersClient<tbl_users>, Prisma__tbl_usersClient<tbl_usersGetPayload<T>>> : CheckSelect<T, Prisma__tbl_usersClient<tbl_users | null >, Prisma__tbl_usersClient<tbl_usersGetPayload<T> | null >>

    /**
     * Find zero or more Tbl_users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tbl_users
     * const tbl_users = await prisma.tbl_users.findMany()
     * 
     * // Get first 10 Tbl_users
     * const tbl_users = await prisma.tbl_users.findMany({ take: 10 })
     * 
     * // Only select the `id_user`
     * const tbl_usersWithId_userOnly = await prisma.tbl_users.findMany({ select: { id_user: true } })
     * 
    **/
    findMany<T extends tbl_usersFindManyArgs>(
      args?: SelectSubset<T, tbl_usersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<tbl_users>>, PrismaPromise<Array<tbl_usersGetPayload<T>>>>

    /**
     * Create a Tbl_users.
     * @param {tbl_usersCreateArgs} args - Arguments to create a Tbl_users.
     * @example
     * // Create one Tbl_users
     * const Tbl_users = await prisma.tbl_users.create({
     *   data: {
     *     // ... data to create a Tbl_users
     *   }
     * })
     * 
    **/
    create<T extends tbl_usersCreateArgs>(
      args: SelectSubset<T, tbl_usersCreateArgs>
    ): CheckSelect<T, Prisma__tbl_usersClient<tbl_users>, Prisma__tbl_usersClient<tbl_usersGetPayload<T>>>

    /**
     * Create many Tbl_users.
     *     @param {tbl_usersCreateManyArgs} args - Arguments to create many Tbl_users.
     *     @example
     *     // Create many Tbl_users
     *     const tbl_users = await prisma.tbl_users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbl_usersCreateManyArgs>(
      args?: SelectSubset<T, tbl_usersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Tbl_users.
     * @param {tbl_usersDeleteArgs} args - Arguments to delete one Tbl_users.
     * @example
     * // Delete one Tbl_users
     * const Tbl_users = await prisma.tbl_users.delete({
     *   where: {
     *     // ... filter to delete one Tbl_users
     *   }
     * })
     * 
    **/
    delete<T extends tbl_usersDeleteArgs>(
      args: SelectSubset<T, tbl_usersDeleteArgs>
    ): CheckSelect<T, Prisma__tbl_usersClient<tbl_users>, Prisma__tbl_usersClient<tbl_usersGetPayload<T>>>

    /**
     * Update one Tbl_users.
     * @param {tbl_usersUpdateArgs} args - Arguments to update one Tbl_users.
     * @example
     * // Update one Tbl_users
     * const tbl_users = await prisma.tbl_users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbl_usersUpdateArgs>(
      args: SelectSubset<T, tbl_usersUpdateArgs>
    ): CheckSelect<T, Prisma__tbl_usersClient<tbl_users>, Prisma__tbl_usersClient<tbl_usersGetPayload<T>>>

    /**
     * Delete zero or more Tbl_users.
     * @param {tbl_usersDeleteManyArgs} args - Arguments to filter Tbl_users to delete.
     * @example
     * // Delete a few Tbl_users
     * const { count } = await prisma.tbl_users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbl_usersDeleteManyArgs>(
      args?: SelectSubset<T, tbl_usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tbl_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tbl_users
     * const tbl_users = await prisma.tbl_users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbl_usersUpdateManyArgs>(
      args: SelectSubset<T, tbl_usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tbl_users.
     * @param {tbl_usersUpsertArgs} args - Arguments to update or create a Tbl_users.
     * @example
     * // Update or create a Tbl_users
     * const tbl_users = await prisma.tbl_users.upsert({
     *   create: {
     *     // ... data to create a Tbl_users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tbl_users we want to update
     *   }
     * })
    **/
    upsert<T extends tbl_usersUpsertArgs>(
      args: SelectSubset<T, tbl_usersUpsertArgs>
    ): CheckSelect<T, Prisma__tbl_usersClient<tbl_users>, Prisma__tbl_usersClient<tbl_usersGetPayload<T>>>

    /**
     * Count the number of Tbl_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_usersCountArgs} args - Arguments to filter Tbl_users to count.
     * @example
     * // Count the number of Tbl_users
     * const count = await prisma.tbl_users.count({
     *   where: {
     *     // ... the filter for the Tbl_users we want to count
     *   }
     * })
    **/
    count<T extends tbl_usersCountArgs>(
      args?: Subset<T, tbl_usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Tbl_usersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tbl_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_usersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Tbl_usersAggregateArgs>(args: Subset<T, Tbl_usersAggregateArgs>): PrismaPromise<GetTbl_usersAggregateType<T>>

    /**
     * Group by Tbl_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Tbl_usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Tbl_usersGroupByArgs['orderBy'] }
        : { orderBy?: Tbl_usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Tbl_usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbl_usersGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for tbl_users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbl_usersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * tbl_users findUnique
   */
  export type tbl_usersFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the tbl_users
     * 
    **/
    select?: tbl_usersSelect | null
    /**
     * Throw an Error if a tbl_users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tbl_users to fetch.
     * 
    **/
    where: tbl_usersWhereUniqueInput
  }


  /**
   * tbl_users findFirst
   */
  export type tbl_usersFindFirstArgs = {
    /**
     * Select specific fields to fetch from the tbl_users
     * 
    **/
    select?: tbl_usersSelect | null
    /**
     * Throw an Error if a tbl_users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tbl_users to fetch.
     * 
    **/
    where?: tbl_usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_users to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbl_users.
     * 
    **/
    cursor?: tbl_usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbl_users.
     * 
    **/
    distinct?: Enumerable<Tbl_usersScalarFieldEnum>
  }


  /**
   * tbl_users findMany
   */
  export type tbl_usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbl_users
     * 
    **/
    select?: tbl_usersSelect | null
    /**
     * Filter, which tbl_users to fetch.
     * 
    **/
    where?: tbl_usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_users to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbl_users.
     * 
    **/
    cursor?: tbl_usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Tbl_usersScalarFieldEnum>
  }


  /**
   * tbl_users create
   */
  export type tbl_usersCreateArgs = {
    /**
     * Select specific fields to fetch from the tbl_users
     * 
    **/
    select?: tbl_usersSelect | null
    /**
     * The data needed to create a tbl_users.
     * 
    **/
    data: XOR<tbl_usersCreateInput, tbl_usersUncheckedCreateInput>
  }


  /**
   * tbl_users createMany
   */
  export type tbl_usersCreateManyArgs = {
    /**
     * The data used to create many tbl_users.
     * 
    **/
    data: Enumerable<tbl_usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbl_users update
   */
  export type tbl_usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbl_users
     * 
    **/
    select?: tbl_usersSelect | null
    /**
     * The data needed to update a tbl_users.
     * 
    **/
    data: XOR<tbl_usersUpdateInput, tbl_usersUncheckedUpdateInput>
    /**
     * Choose, which tbl_users to update.
     * 
    **/
    where: tbl_usersWhereUniqueInput
  }


  /**
   * tbl_users updateMany
   */
  export type tbl_usersUpdateManyArgs = {
    /**
     * The data used to update tbl_users.
     * 
    **/
    data: XOR<tbl_usersUpdateManyMutationInput, tbl_usersUncheckedUpdateManyInput>
    /**
     * Filter which tbl_users to update
     * 
    **/
    where?: tbl_usersWhereInput
  }


  /**
   * tbl_users upsert
   */
  export type tbl_usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbl_users
     * 
    **/
    select?: tbl_usersSelect | null
    /**
     * The filter to search for the tbl_users to update in case it exists.
     * 
    **/
    where: tbl_usersWhereUniqueInput
    /**
     * In case the tbl_users found by the `where` argument doesn't exist, create a new tbl_users with this data.
     * 
    **/
    create: XOR<tbl_usersCreateInput, tbl_usersUncheckedCreateInput>
    /**
     * In case the tbl_users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<tbl_usersUpdateInput, tbl_usersUncheckedUpdateInput>
  }


  /**
   * tbl_users delete
   */
  export type tbl_usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbl_users
     * 
    **/
    select?: tbl_usersSelect | null
    /**
     * Filter which tbl_users to delete.
     * 
    **/
    where: tbl_usersWhereUniqueInput
  }


  /**
   * tbl_users deleteMany
   */
  export type tbl_usersDeleteManyArgs = {
    /**
     * Filter which tbl_users to delete
     * 
    **/
    where?: tbl_usersWhereInput
  }


  /**
   * tbl_users without action
   */
  export type tbl_usersArgs = {
    /**
     * Select specific fields to fetch from the tbl_users
     * 
    **/
    select?: tbl_usersSelect | null
  }



  /**
   * Model tbl_menu
   */


  export type AggregateTbl_menu = {
    _count: Tbl_menuCountAggregateOutputType | null
    _avg: Tbl_menuAvgAggregateOutputType | null
    _sum: Tbl_menuSumAggregateOutputType | null
    _min: Tbl_menuMinAggregateOutputType | null
    _max: Tbl_menuMaxAggregateOutputType | null
  }

  export type Tbl_menuAvgAggregateOutputType = {
    id_menu: number | null
  }

  export type Tbl_menuSumAggregateOutputType = {
    id_menu: number | null
  }

  export type Tbl_menuMinAggregateOutputType = {
    id_menu: number | null
    menu_name: string | null
    menu_link: string | null
    role: string | null
  }

  export type Tbl_menuMaxAggregateOutputType = {
    id_menu: number | null
    menu_name: string | null
    menu_link: string | null
    role: string | null
  }

  export type Tbl_menuCountAggregateOutputType = {
    id_menu: number
    menu_name: number
    menu_link: number
    role: number
    _all: number
  }


  export type Tbl_menuAvgAggregateInputType = {
    id_menu?: true
  }

  export type Tbl_menuSumAggregateInputType = {
    id_menu?: true
  }

  export type Tbl_menuMinAggregateInputType = {
    id_menu?: true
    menu_name?: true
    menu_link?: true
    role?: true
  }

  export type Tbl_menuMaxAggregateInputType = {
    id_menu?: true
    menu_name?: true
    menu_link?: true
    role?: true
  }

  export type Tbl_menuCountAggregateInputType = {
    id_menu?: true
    menu_name?: true
    menu_link?: true
    role?: true
    _all?: true
  }

  export type Tbl_menuAggregateArgs = {
    /**
     * Filter which tbl_menu to aggregate.
     * 
    **/
    where?: tbl_menuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_menus to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_menuOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: tbl_menuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_menus from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_menus.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbl_menus
    **/
    _count?: true | Tbl_menuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Tbl_menuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Tbl_menuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Tbl_menuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Tbl_menuMaxAggregateInputType
  }

  export type GetTbl_menuAggregateType<T extends Tbl_menuAggregateArgs> = {
        [P in keyof T & keyof AggregateTbl_menu]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbl_menu[P]>
      : GetScalarType<T[P], AggregateTbl_menu[P]>
  }




  export type Tbl_menuGroupByArgs = {
    where?: tbl_menuWhereInput
    orderBy?: Enumerable<tbl_menuOrderByWithAggregationInput>
    by: Array<Tbl_menuScalarFieldEnum>
    having?: tbl_menuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Tbl_menuCountAggregateInputType | true
    _avg?: Tbl_menuAvgAggregateInputType
    _sum?: Tbl_menuSumAggregateInputType
    _min?: Tbl_menuMinAggregateInputType
    _max?: Tbl_menuMaxAggregateInputType
  }


  export type Tbl_menuGroupByOutputType = {
    id_menu: number
    menu_name: string | null
    menu_link: string | null
    role: string | null
    _count: Tbl_menuCountAggregateOutputType | null
    _avg: Tbl_menuAvgAggregateOutputType | null
    _sum: Tbl_menuSumAggregateOutputType | null
    _min: Tbl_menuMinAggregateOutputType | null
    _max: Tbl_menuMaxAggregateOutputType | null
  }

  type GetTbl_menuGroupByPayload<T extends Tbl_menuGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Tbl_menuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Tbl_menuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Tbl_menuGroupByOutputType[P]>
            : GetScalarType<T[P], Tbl_menuGroupByOutputType[P]>
        }
      >
    >


  export type tbl_menuSelect = {
    id_menu?: boolean
    menu_name?: boolean
    menu_link?: boolean
    role?: boolean
  }

  export type tbl_menuGetPayload<
    S extends boolean | null | undefined | tbl_menuArgs,
    U = keyof S
      > = S extends true
        ? tbl_menu
    : S extends undefined
    ? never
    : S extends tbl_menuArgs | tbl_menuFindManyArgs
    ?'include' extends U
    ? tbl_menu 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof tbl_menu ? tbl_menu[P] : never
  } 
    : tbl_menu
  : tbl_menu


  type tbl_menuCountArgs = Merge<
    Omit<tbl_menuFindManyArgs, 'select' | 'include'> & {
      select?: Tbl_menuCountAggregateInputType | true
    }
  >

  export interface tbl_menuDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Tbl_menu that matches the filter.
     * @param {tbl_menuFindUniqueArgs} args - Arguments to find a Tbl_menu
     * @example
     * // Get one Tbl_menu
     * const tbl_menu = await prisma.tbl_menu.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbl_menuFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbl_menuFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbl_menu'> extends True ? CheckSelect<T, Prisma__tbl_menuClient<tbl_menu>, Prisma__tbl_menuClient<tbl_menuGetPayload<T>>> : CheckSelect<T, Prisma__tbl_menuClient<tbl_menu | null >, Prisma__tbl_menuClient<tbl_menuGetPayload<T> | null >>

    /**
     * Find the first Tbl_menu that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_menuFindFirstArgs} args - Arguments to find a Tbl_menu
     * @example
     * // Get one Tbl_menu
     * const tbl_menu = await prisma.tbl_menu.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbl_menuFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbl_menuFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbl_menu'> extends True ? CheckSelect<T, Prisma__tbl_menuClient<tbl_menu>, Prisma__tbl_menuClient<tbl_menuGetPayload<T>>> : CheckSelect<T, Prisma__tbl_menuClient<tbl_menu | null >, Prisma__tbl_menuClient<tbl_menuGetPayload<T> | null >>

    /**
     * Find zero or more Tbl_menus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_menuFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tbl_menus
     * const tbl_menus = await prisma.tbl_menu.findMany()
     * 
     * // Get first 10 Tbl_menus
     * const tbl_menus = await prisma.tbl_menu.findMany({ take: 10 })
     * 
     * // Only select the `id_menu`
     * const tbl_menuWithId_menuOnly = await prisma.tbl_menu.findMany({ select: { id_menu: true } })
     * 
    **/
    findMany<T extends tbl_menuFindManyArgs>(
      args?: SelectSubset<T, tbl_menuFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<tbl_menu>>, PrismaPromise<Array<tbl_menuGetPayload<T>>>>

    /**
     * Create a Tbl_menu.
     * @param {tbl_menuCreateArgs} args - Arguments to create a Tbl_menu.
     * @example
     * // Create one Tbl_menu
     * const Tbl_menu = await prisma.tbl_menu.create({
     *   data: {
     *     // ... data to create a Tbl_menu
     *   }
     * })
     * 
    **/
    create<T extends tbl_menuCreateArgs>(
      args: SelectSubset<T, tbl_menuCreateArgs>
    ): CheckSelect<T, Prisma__tbl_menuClient<tbl_menu>, Prisma__tbl_menuClient<tbl_menuGetPayload<T>>>

    /**
     * Create many Tbl_menus.
     *     @param {tbl_menuCreateManyArgs} args - Arguments to create many Tbl_menus.
     *     @example
     *     // Create many Tbl_menus
     *     const tbl_menu = await prisma.tbl_menu.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbl_menuCreateManyArgs>(
      args?: SelectSubset<T, tbl_menuCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Tbl_menu.
     * @param {tbl_menuDeleteArgs} args - Arguments to delete one Tbl_menu.
     * @example
     * // Delete one Tbl_menu
     * const Tbl_menu = await prisma.tbl_menu.delete({
     *   where: {
     *     // ... filter to delete one Tbl_menu
     *   }
     * })
     * 
    **/
    delete<T extends tbl_menuDeleteArgs>(
      args: SelectSubset<T, tbl_menuDeleteArgs>
    ): CheckSelect<T, Prisma__tbl_menuClient<tbl_menu>, Prisma__tbl_menuClient<tbl_menuGetPayload<T>>>

    /**
     * Update one Tbl_menu.
     * @param {tbl_menuUpdateArgs} args - Arguments to update one Tbl_menu.
     * @example
     * // Update one Tbl_menu
     * const tbl_menu = await prisma.tbl_menu.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbl_menuUpdateArgs>(
      args: SelectSubset<T, tbl_menuUpdateArgs>
    ): CheckSelect<T, Prisma__tbl_menuClient<tbl_menu>, Prisma__tbl_menuClient<tbl_menuGetPayload<T>>>

    /**
     * Delete zero or more Tbl_menus.
     * @param {tbl_menuDeleteManyArgs} args - Arguments to filter Tbl_menus to delete.
     * @example
     * // Delete a few Tbl_menus
     * const { count } = await prisma.tbl_menu.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbl_menuDeleteManyArgs>(
      args?: SelectSubset<T, tbl_menuDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tbl_menus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_menuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tbl_menus
     * const tbl_menu = await prisma.tbl_menu.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbl_menuUpdateManyArgs>(
      args: SelectSubset<T, tbl_menuUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tbl_menu.
     * @param {tbl_menuUpsertArgs} args - Arguments to update or create a Tbl_menu.
     * @example
     * // Update or create a Tbl_menu
     * const tbl_menu = await prisma.tbl_menu.upsert({
     *   create: {
     *     // ... data to create a Tbl_menu
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tbl_menu we want to update
     *   }
     * })
    **/
    upsert<T extends tbl_menuUpsertArgs>(
      args: SelectSubset<T, tbl_menuUpsertArgs>
    ): CheckSelect<T, Prisma__tbl_menuClient<tbl_menu>, Prisma__tbl_menuClient<tbl_menuGetPayload<T>>>

    /**
     * Count the number of Tbl_menus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_menuCountArgs} args - Arguments to filter Tbl_menus to count.
     * @example
     * // Count the number of Tbl_menus
     * const count = await prisma.tbl_menu.count({
     *   where: {
     *     // ... the filter for the Tbl_menus we want to count
     *   }
     * })
    **/
    count<T extends tbl_menuCountArgs>(
      args?: Subset<T, tbl_menuCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Tbl_menuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tbl_menu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_menuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Tbl_menuAggregateArgs>(args: Subset<T, Tbl_menuAggregateArgs>): PrismaPromise<GetTbl_menuAggregateType<T>>

    /**
     * Group by Tbl_menu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_menuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Tbl_menuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Tbl_menuGroupByArgs['orderBy'] }
        : { orderBy?: Tbl_menuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Tbl_menuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbl_menuGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for tbl_menu.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbl_menuClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * tbl_menu findUnique
   */
  export type tbl_menuFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the tbl_menu
     * 
    **/
    select?: tbl_menuSelect | null
    /**
     * Throw an Error if a tbl_menu can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tbl_menu to fetch.
     * 
    **/
    where: tbl_menuWhereUniqueInput
  }


  /**
   * tbl_menu findFirst
   */
  export type tbl_menuFindFirstArgs = {
    /**
     * Select specific fields to fetch from the tbl_menu
     * 
    **/
    select?: tbl_menuSelect | null
    /**
     * Throw an Error if a tbl_menu can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tbl_menu to fetch.
     * 
    **/
    where?: tbl_menuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_menus to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_menuOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbl_menus.
     * 
    **/
    cursor?: tbl_menuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_menus from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_menus.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbl_menus.
     * 
    **/
    distinct?: Enumerable<Tbl_menuScalarFieldEnum>
  }


  /**
   * tbl_menu findMany
   */
  export type tbl_menuFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbl_menu
     * 
    **/
    select?: tbl_menuSelect | null
    /**
     * Filter, which tbl_menus to fetch.
     * 
    **/
    where?: tbl_menuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_menus to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_menuOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbl_menus.
     * 
    **/
    cursor?: tbl_menuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_menus from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_menus.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Tbl_menuScalarFieldEnum>
  }


  /**
   * tbl_menu create
   */
  export type tbl_menuCreateArgs = {
    /**
     * Select specific fields to fetch from the tbl_menu
     * 
    **/
    select?: tbl_menuSelect | null
    /**
     * The data needed to create a tbl_menu.
     * 
    **/
    data: XOR<tbl_menuCreateInput, tbl_menuUncheckedCreateInput>
  }


  /**
   * tbl_menu createMany
   */
  export type tbl_menuCreateManyArgs = {
    /**
     * The data used to create many tbl_menus.
     * 
    **/
    data: Enumerable<tbl_menuCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbl_menu update
   */
  export type tbl_menuUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbl_menu
     * 
    **/
    select?: tbl_menuSelect | null
    /**
     * The data needed to update a tbl_menu.
     * 
    **/
    data: XOR<tbl_menuUpdateInput, tbl_menuUncheckedUpdateInput>
    /**
     * Choose, which tbl_menu to update.
     * 
    **/
    where: tbl_menuWhereUniqueInput
  }


  /**
   * tbl_menu updateMany
   */
  export type tbl_menuUpdateManyArgs = {
    /**
     * The data used to update tbl_menus.
     * 
    **/
    data: XOR<tbl_menuUpdateManyMutationInput, tbl_menuUncheckedUpdateManyInput>
    /**
     * Filter which tbl_menus to update
     * 
    **/
    where?: tbl_menuWhereInput
  }


  /**
   * tbl_menu upsert
   */
  export type tbl_menuUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbl_menu
     * 
    **/
    select?: tbl_menuSelect | null
    /**
     * The filter to search for the tbl_menu to update in case it exists.
     * 
    **/
    where: tbl_menuWhereUniqueInput
    /**
     * In case the tbl_menu found by the `where` argument doesn't exist, create a new tbl_menu with this data.
     * 
    **/
    create: XOR<tbl_menuCreateInput, tbl_menuUncheckedCreateInput>
    /**
     * In case the tbl_menu was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<tbl_menuUpdateInput, tbl_menuUncheckedUpdateInput>
  }


  /**
   * tbl_menu delete
   */
  export type tbl_menuDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbl_menu
     * 
    **/
    select?: tbl_menuSelect | null
    /**
     * Filter which tbl_menu to delete.
     * 
    **/
    where: tbl_menuWhereUniqueInput
  }


  /**
   * tbl_menu deleteMany
   */
  export type tbl_menuDeleteManyArgs = {
    /**
     * Filter which tbl_menus to delete
     * 
    **/
    where?: tbl_menuWhereInput
  }


  /**
   * tbl_menu without action
   */
  export type tbl_menuArgs = {
    /**
     * Select specific fields to fetch from the tbl_menu
     * 
    **/
    select?: tbl_menuSelect | null
  }



  /**
   * Model tbl_goals
   */


  export type AggregateTbl_goals = {
    _count: Tbl_goalsCountAggregateOutputType | null
    _avg: Tbl_goalsAvgAggregateOutputType | null
    _sum: Tbl_goalsSumAggregateOutputType | null
    _min: Tbl_goalsMinAggregateOutputType | null
    _max: Tbl_goalsMaxAggregateOutputType | null
  }

  export type Tbl_goalsAvgAggregateOutputType = {
    id_goals: number | null
    status_goals: number | null
    progress: number | null
    parent_goals: number | null
    id_area: number | null
    parent_family: number | null
    id_cluster: number | null
  }

  export type Tbl_goalsSumAggregateOutputType = {
    id_goals: number | null
    status_goals: number | null
    progress: number | null
    parent_goals: number | null
    id_area: number | null
    parent_family: number | null
    id_cluster: number | null
  }

  export type Tbl_goalsMinAggregateOutputType = {
    id_goals: number | null
    issue_goals: string | null
    title_goals: string | null
    desc_goals: string | null
    pic_goals: string | null
    start_date: Date | null
    due_date: Date | null
    status_goals: number | null
    progress: number | null
    parent_goals: number | null
    last_modified_date: Date | null
    id_area: number | null
    kodefikasi: string | null
    parent_family: number | null
    id_cluster: number | null
  }

  export type Tbl_goalsMaxAggregateOutputType = {
    id_goals: number | null
    issue_goals: string | null
    title_goals: string | null
    desc_goals: string | null
    pic_goals: string | null
    start_date: Date | null
    due_date: Date | null
    status_goals: number | null
    progress: number | null
    parent_goals: number | null
    last_modified_date: Date | null
    id_area: number | null
    kodefikasi: string | null
    parent_family: number | null
    id_cluster: number | null
  }

  export type Tbl_goalsCountAggregateOutputType = {
    id_goals: number
    issue_goals: number
    title_goals: number
    desc_goals: number
    pic_goals: number
    start_date: number
    due_date: number
    status_goals: number
    progress: number
    parent_goals: number
    type_goals: number
    last_modified_date: number
    indikator: number
    id_area: number
    kodefikasi: number
    parent_family: number
    id_cluster: number
    _all: number
  }


  export type Tbl_goalsAvgAggregateInputType = {
    id_goals?: true
    status_goals?: true
    progress?: true
    parent_goals?: true
    id_area?: true
    parent_family?: true
    id_cluster?: true
  }

  export type Tbl_goalsSumAggregateInputType = {
    id_goals?: true
    status_goals?: true
    progress?: true
    parent_goals?: true
    id_area?: true
    parent_family?: true
    id_cluster?: true
  }

  export type Tbl_goalsMinAggregateInputType = {
    id_goals?: true
    issue_goals?: true
    title_goals?: true
    desc_goals?: true
    pic_goals?: true
    start_date?: true
    due_date?: true
    status_goals?: true
    progress?: true
    parent_goals?: true
    last_modified_date?: true
    id_area?: true
    kodefikasi?: true
    parent_family?: true
    id_cluster?: true
  }

  export type Tbl_goalsMaxAggregateInputType = {
    id_goals?: true
    issue_goals?: true
    title_goals?: true
    desc_goals?: true
    pic_goals?: true
    start_date?: true
    due_date?: true
    status_goals?: true
    progress?: true
    parent_goals?: true
    last_modified_date?: true
    id_area?: true
    kodefikasi?: true
    parent_family?: true
    id_cluster?: true
  }

  export type Tbl_goalsCountAggregateInputType = {
    id_goals?: true
    issue_goals?: true
    title_goals?: true
    desc_goals?: true
    pic_goals?: true
    start_date?: true
    due_date?: true
    status_goals?: true
    progress?: true
    parent_goals?: true
    type_goals?: true
    last_modified_date?: true
    indikator?: true
    id_area?: true
    kodefikasi?: true
    parent_family?: true
    id_cluster?: true
    _all?: true
  }

  export type Tbl_goalsAggregateArgs = {
    /**
     * Filter which tbl_goals to aggregate.
     * 
    **/
    where?: tbl_goalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_goals to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_goalsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: tbl_goalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_goals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_goals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbl_goals
    **/
    _count?: true | Tbl_goalsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Tbl_goalsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Tbl_goalsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Tbl_goalsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Tbl_goalsMaxAggregateInputType
  }

  export type GetTbl_goalsAggregateType<T extends Tbl_goalsAggregateArgs> = {
        [P in keyof T & keyof AggregateTbl_goals]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbl_goals[P]>
      : GetScalarType<T[P], AggregateTbl_goals[P]>
  }




  export type Tbl_goalsGroupByArgs = {
    where?: tbl_goalsWhereInput
    orderBy?: Enumerable<tbl_goalsOrderByWithAggregationInput>
    by: Array<Tbl_goalsScalarFieldEnum>
    having?: tbl_goalsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Tbl_goalsCountAggregateInputType | true
    _avg?: Tbl_goalsAvgAggregateInputType
    _sum?: Tbl_goalsSumAggregateInputType
    _min?: Tbl_goalsMinAggregateInputType
    _max?: Tbl_goalsMaxAggregateInputType
  }


  export type Tbl_goalsGroupByOutputType = {
    id_goals: number
    issue_goals: string | null
    title_goals: string | null
    desc_goals: string | null
    pic_goals: string | null
    start_date: Date | null
    due_date: Date | null
    status_goals: number | null
    progress: number | null
    parent_goals: number | null
    type_goals: JsonValue | null
    last_modified_date: Date | null
    indikator: JsonValue | null
    id_area: number | null
    kodefikasi: string | null
    parent_family: number | null
    id_cluster: number | null
    _count: Tbl_goalsCountAggregateOutputType | null
    _avg: Tbl_goalsAvgAggregateOutputType | null
    _sum: Tbl_goalsSumAggregateOutputType | null
    _min: Tbl_goalsMinAggregateOutputType | null
    _max: Tbl_goalsMaxAggregateOutputType | null
  }

  type GetTbl_goalsGroupByPayload<T extends Tbl_goalsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Tbl_goalsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Tbl_goalsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Tbl_goalsGroupByOutputType[P]>
            : GetScalarType<T[P], Tbl_goalsGroupByOutputType[P]>
        }
      >
    >


  export type tbl_goalsSelect = {
    id_goals?: boolean
    issue_goals?: boolean
    title_goals?: boolean
    desc_goals?: boolean
    pic_goals?: boolean
    start_date?: boolean
    due_date?: boolean
    status_goals?: boolean
    progress?: boolean
    parent_goals?: boolean
    type_goals?: boolean
    last_modified_date?: boolean
    indikator?: boolean
    id_area?: boolean
    kodefikasi?: boolean
    parent_family?: boolean
    tbl_cluster?: boolean | tbl_clusterArgs
    id_cluster?: boolean
  }

  export type tbl_goalsInclude = {
    tbl_cluster?: boolean | tbl_clusterArgs
  }

  export type tbl_goalsGetPayload<
    S extends boolean | null | undefined | tbl_goalsArgs,
    U = keyof S
      > = S extends true
        ? tbl_goals
    : S extends undefined
    ? never
    : S extends tbl_goalsArgs | tbl_goalsFindManyArgs
    ?'include' extends U
    ? tbl_goals  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tbl_cluster' ? tbl_clusterGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tbl_cluster' ? tbl_clusterGetPayload<S['select'][P]> | null :  P extends keyof tbl_goals ? tbl_goals[P] : never
  } 
    : tbl_goals
  : tbl_goals


  type tbl_goalsCountArgs = Merge<
    Omit<tbl_goalsFindManyArgs, 'select' | 'include'> & {
      select?: Tbl_goalsCountAggregateInputType | true
    }
  >

  export interface tbl_goalsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Tbl_goals that matches the filter.
     * @param {tbl_goalsFindUniqueArgs} args - Arguments to find a Tbl_goals
     * @example
     * // Get one Tbl_goals
     * const tbl_goals = await prisma.tbl_goals.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbl_goalsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbl_goalsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbl_goals'> extends True ? CheckSelect<T, Prisma__tbl_goalsClient<tbl_goals>, Prisma__tbl_goalsClient<tbl_goalsGetPayload<T>>> : CheckSelect<T, Prisma__tbl_goalsClient<tbl_goals | null >, Prisma__tbl_goalsClient<tbl_goalsGetPayload<T> | null >>

    /**
     * Find the first Tbl_goals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_goalsFindFirstArgs} args - Arguments to find a Tbl_goals
     * @example
     * // Get one Tbl_goals
     * const tbl_goals = await prisma.tbl_goals.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbl_goalsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbl_goalsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbl_goals'> extends True ? CheckSelect<T, Prisma__tbl_goalsClient<tbl_goals>, Prisma__tbl_goalsClient<tbl_goalsGetPayload<T>>> : CheckSelect<T, Prisma__tbl_goalsClient<tbl_goals | null >, Prisma__tbl_goalsClient<tbl_goalsGetPayload<T> | null >>

    /**
     * Find zero or more Tbl_goals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_goalsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tbl_goals
     * const tbl_goals = await prisma.tbl_goals.findMany()
     * 
     * // Get first 10 Tbl_goals
     * const tbl_goals = await prisma.tbl_goals.findMany({ take: 10 })
     * 
     * // Only select the `id_goals`
     * const tbl_goalsWithId_goalsOnly = await prisma.tbl_goals.findMany({ select: { id_goals: true } })
     * 
    **/
    findMany<T extends tbl_goalsFindManyArgs>(
      args?: SelectSubset<T, tbl_goalsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<tbl_goals>>, PrismaPromise<Array<tbl_goalsGetPayload<T>>>>

    /**
     * Create a Tbl_goals.
     * @param {tbl_goalsCreateArgs} args - Arguments to create a Tbl_goals.
     * @example
     * // Create one Tbl_goals
     * const Tbl_goals = await prisma.tbl_goals.create({
     *   data: {
     *     // ... data to create a Tbl_goals
     *   }
     * })
     * 
    **/
    create<T extends tbl_goalsCreateArgs>(
      args: SelectSubset<T, tbl_goalsCreateArgs>
    ): CheckSelect<T, Prisma__tbl_goalsClient<tbl_goals>, Prisma__tbl_goalsClient<tbl_goalsGetPayload<T>>>

    /**
     * Create many Tbl_goals.
     *     @param {tbl_goalsCreateManyArgs} args - Arguments to create many Tbl_goals.
     *     @example
     *     // Create many Tbl_goals
     *     const tbl_goals = await prisma.tbl_goals.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbl_goalsCreateManyArgs>(
      args?: SelectSubset<T, tbl_goalsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Tbl_goals.
     * @param {tbl_goalsDeleteArgs} args - Arguments to delete one Tbl_goals.
     * @example
     * // Delete one Tbl_goals
     * const Tbl_goals = await prisma.tbl_goals.delete({
     *   where: {
     *     // ... filter to delete one Tbl_goals
     *   }
     * })
     * 
    **/
    delete<T extends tbl_goalsDeleteArgs>(
      args: SelectSubset<T, tbl_goalsDeleteArgs>
    ): CheckSelect<T, Prisma__tbl_goalsClient<tbl_goals>, Prisma__tbl_goalsClient<tbl_goalsGetPayload<T>>>

    /**
     * Update one Tbl_goals.
     * @param {tbl_goalsUpdateArgs} args - Arguments to update one Tbl_goals.
     * @example
     * // Update one Tbl_goals
     * const tbl_goals = await prisma.tbl_goals.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbl_goalsUpdateArgs>(
      args: SelectSubset<T, tbl_goalsUpdateArgs>
    ): CheckSelect<T, Prisma__tbl_goalsClient<tbl_goals>, Prisma__tbl_goalsClient<tbl_goalsGetPayload<T>>>

    /**
     * Delete zero or more Tbl_goals.
     * @param {tbl_goalsDeleteManyArgs} args - Arguments to filter Tbl_goals to delete.
     * @example
     * // Delete a few Tbl_goals
     * const { count } = await prisma.tbl_goals.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbl_goalsDeleteManyArgs>(
      args?: SelectSubset<T, tbl_goalsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tbl_goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_goalsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tbl_goals
     * const tbl_goals = await prisma.tbl_goals.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbl_goalsUpdateManyArgs>(
      args: SelectSubset<T, tbl_goalsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tbl_goals.
     * @param {tbl_goalsUpsertArgs} args - Arguments to update or create a Tbl_goals.
     * @example
     * // Update or create a Tbl_goals
     * const tbl_goals = await prisma.tbl_goals.upsert({
     *   create: {
     *     // ... data to create a Tbl_goals
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tbl_goals we want to update
     *   }
     * })
    **/
    upsert<T extends tbl_goalsUpsertArgs>(
      args: SelectSubset<T, tbl_goalsUpsertArgs>
    ): CheckSelect<T, Prisma__tbl_goalsClient<tbl_goals>, Prisma__tbl_goalsClient<tbl_goalsGetPayload<T>>>

    /**
     * Count the number of Tbl_goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_goalsCountArgs} args - Arguments to filter Tbl_goals to count.
     * @example
     * // Count the number of Tbl_goals
     * const count = await prisma.tbl_goals.count({
     *   where: {
     *     // ... the filter for the Tbl_goals we want to count
     *   }
     * })
    **/
    count<T extends tbl_goalsCountArgs>(
      args?: Subset<T, tbl_goalsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Tbl_goalsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tbl_goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_goalsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Tbl_goalsAggregateArgs>(args: Subset<T, Tbl_goalsAggregateArgs>): PrismaPromise<GetTbl_goalsAggregateType<T>>

    /**
     * Group by Tbl_goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_goalsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Tbl_goalsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Tbl_goalsGroupByArgs['orderBy'] }
        : { orderBy?: Tbl_goalsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Tbl_goalsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbl_goalsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for tbl_goals.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbl_goalsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tbl_cluster<T extends tbl_clusterArgs = {}>(args?: Subset<T, tbl_clusterArgs>): CheckSelect<T, Prisma__tbl_clusterClient<tbl_cluster | null >, Prisma__tbl_clusterClient<tbl_clusterGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * tbl_goals findUnique
   */
  export type tbl_goalsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the tbl_goals
     * 
    **/
    select?: tbl_goalsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_goalsInclude | null
    /**
     * Throw an Error if a tbl_goals can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tbl_goals to fetch.
     * 
    **/
    where: tbl_goalsWhereUniqueInput
  }


  /**
   * tbl_goals findFirst
   */
  export type tbl_goalsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the tbl_goals
     * 
    **/
    select?: tbl_goalsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_goalsInclude | null
    /**
     * Throw an Error if a tbl_goals can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tbl_goals to fetch.
     * 
    **/
    where?: tbl_goalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_goals to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_goalsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbl_goals.
     * 
    **/
    cursor?: tbl_goalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_goals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_goals.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbl_goals.
     * 
    **/
    distinct?: Enumerable<Tbl_goalsScalarFieldEnum>
  }


  /**
   * tbl_goals findMany
   */
  export type tbl_goalsFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbl_goals
     * 
    **/
    select?: tbl_goalsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_goalsInclude | null
    /**
     * Filter, which tbl_goals to fetch.
     * 
    **/
    where?: tbl_goalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_goals to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_goalsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbl_goals.
     * 
    **/
    cursor?: tbl_goalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_goals from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_goals.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Tbl_goalsScalarFieldEnum>
  }


  /**
   * tbl_goals create
   */
  export type tbl_goalsCreateArgs = {
    /**
     * Select specific fields to fetch from the tbl_goals
     * 
    **/
    select?: tbl_goalsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_goalsInclude | null
    /**
     * The data needed to create a tbl_goals.
     * 
    **/
    data: XOR<tbl_goalsCreateInput, tbl_goalsUncheckedCreateInput>
  }


  /**
   * tbl_goals createMany
   */
  export type tbl_goalsCreateManyArgs = {
    /**
     * The data used to create many tbl_goals.
     * 
    **/
    data: Enumerable<tbl_goalsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbl_goals update
   */
  export type tbl_goalsUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbl_goals
     * 
    **/
    select?: tbl_goalsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_goalsInclude | null
    /**
     * The data needed to update a tbl_goals.
     * 
    **/
    data: XOR<tbl_goalsUpdateInput, tbl_goalsUncheckedUpdateInput>
    /**
     * Choose, which tbl_goals to update.
     * 
    **/
    where: tbl_goalsWhereUniqueInput
  }


  /**
   * tbl_goals updateMany
   */
  export type tbl_goalsUpdateManyArgs = {
    /**
     * The data used to update tbl_goals.
     * 
    **/
    data: XOR<tbl_goalsUpdateManyMutationInput, tbl_goalsUncheckedUpdateManyInput>
    /**
     * Filter which tbl_goals to update
     * 
    **/
    where?: tbl_goalsWhereInput
  }


  /**
   * tbl_goals upsert
   */
  export type tbl_goalsUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbl_goals
     * 
    **/
    select?: tbl_goalsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_goalsInclude | null
    /**
     * The filter to search for the tbl_goals to update in case it exists.
     * 
    **/
    where: tbl_goalsWhereUniqueInput
    /**
     * In case the tbl_goals found by the `where` argument doesn't exist, create a new tbl_goals with this data.
     * 
    **/
    create: XOR<tbl_goalsCreateInput, tbl_goalsUncheckedCreateInput>
    /**
     * In case the tbl_goals was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<tbl_goalsUpdateInput, tbl_goalsUncheckedUpdateInput>
  }


  /**
   * tbl_goals delete
   */
  export type tbl_goalsDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbl_goals
     * 
    **/
    select?: tbl_goalsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_goalsInclude | null
    /**
     * Filter which tbl_goals to delete.
     * 
    **/
    where: tbl_goalsWhereUniqueInput
  }


  /**
   * tbl_goals deleteMany
   */
  export type tbl_goalsDeleteManyArgs = {
    /**
     * Filter which tbl_goals to delete
     * 
    **/
    where?: tbl_goalsWhereInput
  }


  /**
   * tbl_goals without action
   */
  export type tbl_goalsArgs = {
    /**
     * Select specific fields to fetch from the tbl_goals
     * 
    **/
    select?: tbl_goalsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_goalsInclude | null
  }



  /**
   * Model mst_area
   */


  export type AggregateMst_area = {
    _count: Mst_areaCountAggregateOutputType | null
    _avg: Mst_areaAvgAggregateOutputType | null
    _sum: Mst_areaSumAggregateOutputType | null
    _min: Mst_areaMinAggregateOutputType | null
    _max: Mst_areaMaxAggregateOutputType | null
  }

  export type Mst_areaAvgAggregateOutputType = {
    id_area: number | null
    id_sub_area: number | null
    id_parent_area: number | null
    active: number | null
  }

  export type Mst_areaSumAggregateOutputType = {
    id_area: number | null
    id_sub_area: number | null
    id_parent_area: number | null
    active: number | null
  }

  export type Mst_areaMinAggregateOutputType = {
    id_area: number | null
    id_sub_area: number | null
    desc_area: string | null
    desc_sub_area: string | null
    id_parent_area: number | null
    active: number | null
  }

  export type Mst_areaMaxAggregateOutputType = {
    id_area: number | null
    id_sub_area: number | null
    desc_area: string | null
    desc_sub_area: string | null
    id_parent_area: number | null
    active: number | null
  }

  export type Mst_areaCountAggregateOutputType = {
    id_area: number
    id_sub_area: number
    desc_area: number
    desc_sub_area: number
    id_parent_area: number
    active: number
    _all: number
  }


  export type Mst_areaAvgAggregateInputType = {
    id_area?: true
    id_sub_area?: true
    id_parent_area?: true
    active?: true
  }

  export type Mst_areaSumAggregateInputType = {
    id_area?: true
    id_sub_area?: true
    id_parent_area?: true
    active?: true
  }

  export type Mst_areaMinAggregateInputType = {
    id_area?: true
    id_sub_area?: true
    desc_area?: true
    desc_sub_area?: true
    id_parent_area?: true
    active?: true
  }

  export type Mst_areaMaxAggregateInputType = {
    id_area?: true
    id_sub_area?: true
    desc_area?: true
    desc_sub_area?: true
    id_parent_area?: true
    active?: true
  }

  export type Mst_areaCountAggregateInputType = {
    id_area?: true
    id_sub_area?: true
    desc_area?: true
    desc_sub_area?: true
    id_parent_area?: true
    active?: true
    _all?: true
  }

  export type Mst_areaAggregateArgs = {
    /**
     * Filter which mst_area to aggregate.
     * 
    **/
    where?: mst_areaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mst_areas to fetch.
     * 
    **/
    orderBy?: Enumerable<mst_areaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: mst_areaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mst_areas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mst_areas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned mst_areas
    **/
    _count?: true | Mst_areaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Mst_areaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Mst_areaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Mst_areaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Mst_areaMaxAggregateInputType
  }

  export type GetMst_areaAggregateType<T extends Mst_areaAggregateArgs> = {
        [P in keyof T & keyof AggregateMst_area]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMst_area[P]>
      : GetScalarType<T[P], AggregateMst_area[P]>
  }




  export type Mst_areaGroupByArgs = {
    where?: mst_areaWhereInput
    orderBy?: Enumerable<mst_areaOrderByWithAggregationInput>
    by: Array<Mst_areaScalarFieldEnum>
    having?: mst_areaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Mst_areaCountAggregateInputType | true
    _avg?: Mst_areaAvgAggregateInputType
    _sum?: Mst_areaSumAggregateInputType
    _min?: Mst_areaMinAggregateInputType
    _max?: Mst_areaMaxAggregateInputType
  }


  export type Mst_areaGroupByOutputType = {
    id_area: number
    id_sub_area: number
    desc_area: string | null
    desc_sub_area: string | null
    id_parent_area: number | null
    active: number | null
    _count: Mst_areaCountAggregateOutputType | null
    _avg: Mst_areaAvgAggregateOutputType | null
    _sum: Mst_areaSumAggregateOutputType | null
    _min: Mst_areaMinAggregateOutputType | null
    _max: Mst_areaMaxAggregateOutputType | null
  }

  type GetMst_areaGroupByPayload<T extends Mst_areaGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Mst_areaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Mst_areaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Mst_areaGroupByOutputType[P]>
            : GetScalarType<T[P], Mst_areaGroupByOutputType[P]>
        }
      >
    >


  export type mst_areaSelect = {
    id_area?: boolean
    id_sub_area?: boolean
    desc_area?: boolean
    desc_sub_area?: boolean
    id_parent_area?: boolean
    active?: boolean
  }

  export type mst_areaGetPayload<
    S extends boolean | null | undefined | mst_areaArgs,
    U = keyof S
      > = S extends true
        ? mst_area
    : S extends undefined
    ? never
    : S extends mst_areaArgs | mst_areaFindManyArgs
    ?'include' extends U
    ? mst_area 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof mst_area ? mst_area[P] : never
  } 
    : mst_area
  : mst_area


  type mst_areaCountArgs = Merge<
    Omit<mst_areaFindManyArgs, 'select' | 'include'> & {
      select?: Mst_areaCountAggregateInputType | true
    }
  >

  export interface mst_areaDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Mst_area that matches the filter.
     * @param {mst_areaFindUniqueArgs} args - Arguments to find a Mst_area
     * @example
     * // Get one Mst_area
     * const mst_area = await prisma.mst_area.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends mst_areaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, mst_areaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'mst_area'> extends True ? CheckSelect<T, Prisma__mst_areaClient<mst_area>, Prisma__mst_areaClient<mst_areaGetPayload<T>>> : CheckSelect<T, Prisma__mst_areaClient<mst_area | null >, Prisma__mst_areaClient<mst_areaGetPayload<T> | null >>

    /**
     * Find the first Mst_area that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mst_areaFindFirstArgs} args - Arguments to find a Mst_area
     * @example
     * // Get one Mst_area
     * const mst_area = await prisma.mst_area.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends mst_areaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, mst_areaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'mst_area'> extends True ? CheckSelect<T, Prisma__mst_areaClient<mst_area>, Prisma__mst_areaClient<mst_areaGetPayload<T>>> : CheckSelect<T, Prisma__mst_areaClient<mst_area | null >, Prisma__mst_areaClient<mst_areaGetPayload<T> | null >>

    /**
     * Find zero or more Mst_areas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mst_areaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mst_areas
     * const mst_areas = await prisma.mst_area.findMany()
     * 
     * // Get first 10 Mst_areas
     * const mst_areas = await prisma.mst_area.findMany({ take: 10 })
     * 
     * // Only select the `id_area`
     * const mst_areaWithId_areaOnly = await prisma.mst_area.findMany({ select: { id_area: true } })
     * 
    **/
    findMany<T extends mst_areaFindManyArgs>(
      args?: SelectSubset<T, mst_areaFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<mst_area>>, PrismaPromise<Array<mst_areaGetPayload<T>>>>

    /**
     * Create a Mst_area.
     * @param {mst_areaCreateArgs} args - Arguments to create a Mst_area.
     * @example
     * // Create one Mst_area
     * const Mst_area = await prisma.mst_area.create({
     *   data: {
     *     // ... data to create a Mst_area
     *   }
     * })
     * 
    **/
    create<T extends mst_areaCreateArgs>(
      args: SelectSubset<T, mst_areaCreateArgs>
    ): CheckSelect<T, Prisma__mst_areaClient<mst_area>, Prisma__mst_areaClient<mst_areaGetPayload<T>>>

    /**
     * Create many Mst_areas.
     *     @param {mst_areaCreateManyArgs} args - Arguments to create many Mst_areas.
     *     @example
     *     // Create many Mst_areas
     *     const mst_area = await prisma.mst_area.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends mst_areaCreateManyArgs>(
      args?: SelectSubset<T, mst_areaCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Mst_area.
     * @param {mst_areaDeleteArgs} args - Arguments to delete one Mst_area.
     * @example
     * // Delete one Mst_area
     * const Mst_area = await prisma.mst_area.delete({
     *   where: {
     *     // ... filter to delete one Mst_area
     *   }
     * })
     * 
    **/
    delete<T extends mst_areaDeleteArgs>(
      args: SelectSubset<T, mst_areaDeleteArgs>
    ): CheckSelect<T, Prisma__mst_areaClient<mst_area>, Prisma__mst_areaClient<mst_areaGetPayload<T>>>

    /**
     * Update one Mst_area.
     * @param {mst_areaUpdateArgs} args - Arguments to update one Mst_area.
     * @example
     * // Update one Mst_area
     * const mst_area = await prisma.mst_area.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends mst_areaUpdateArgs>(
      args: SelectSubset<T, mst_areaUpdateArgs>
    ): CheckSelect<T, Prisma__mst_areaClient<mst_area>, Prisma__mst_areaClient<mst_areaGetPayload<T>>>

    /**
     * Delete zero or more Mst_areas.
     * @param {mst_areaDeleteManyArgs} args - Arguments to filter Mst_areas to delete.
     * @example
     * // Delete a few Mst_areas
     * const { count } = await prisma.mst_area.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends mst_areaDeleteManyArgs>(
      args?: SelectSubset<T, mst_areaDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mst_areas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mst_areaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mst_areas
     * const mst_area = await prisma.mst_area.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends mst_areaUpdateManyArgs>(
      args: SelectSubset<T, mst_areaUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Mst_area.
     * @param {mst_areaUpsertArgs} args - Arguments to update or create a Mst_area.
     * @example
     * // Update or create a Mst_area
     * const mst_area = await prisma.mst_area.upsert({
     *   create: {
     *     // ... data to create a Mst_area
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mst_area we want to update
     *   }
     * })
    **/
    upsert<T extends mst_areaUpsertArgs>(
      args: SelectSubset<T, mst_areaUpsertArgs>
    ): CheckSelect<T, Prisma__mst_areaClient<mst_area>, Prisma__mst_areaClient<mst_areaGetPayload<T>>>

    /**
     * Count the number of Mst_areas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mst_areaCountArgs} args - Arguments to filter Mst_areas to count.
     * @example
     * // Count the number of Mst_areas
     * const count = await prisma.mst_area.count({
     *   where: {
     *     // ... the filter for the Mst_areas we want to count
     *   }
     * })
    **/
    count<T extends mst_areaCountArgs>(
      args?: Subset<T, mst_areaCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Mst_areaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mst_area.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Mst_areaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Mst_areaAggregateArgs>(args: Subset<T, Mst_areaAggregateArgs>): PrismaPromise<GetMst_areaAggregateType<T>>

    /**
     * Group by Mst_area.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Mst_areaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Mst_areaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Mst_areaGroupByArgs['orderBy'] }
        : { orderBy?: Mst_areaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Mst_areaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMst_areaGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for mst_area.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__mst_areaClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * mst_area findUnique
   */
  export type mst_areaFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the mst_area
     * 
    **/
    select?: mst_areaSelect | null
    /**
     * Throw an Error if a mst_area can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which mst_area to fetch.
     * 
    **/
    where: mst_areaWhereUniqueInput
  }


  /**
   * mst_area findFirst
   */
  export type mst_areaFindFirstArgs = {
    /**
     * Select specific fields to fetch from the mst_area
     * 
    **/
    select?: mst_areaSelect | null
    /**
     * Throw an Error if a mst_area can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which mst_area to fetch.
     * 
    **/
    where?: mst_areaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mst_areas to fetch.
     * 
    **/
    orderBy?: Enumerable<mst_areaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for mst_areas.
     * 
    **/
    cursor?: mst_areaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mst_areas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mst_areas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of mst_areas.
     * 
    **/
    distinct?: Enumerable<Mst_areaScalarFieldEnum>
  }


  /**
   * mst_area findMany
   */
  export type mst_areaFindManyArgs = {
    /**
     * Select specific fields to fetch from the mst_area
     * 
    **/
    select?: mst_areaSelect | null
    /**
     * Filter, which mst_areas to fetch.
     * 
    **/
    where?: mst_areaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mst_areas to fetch.
     * 
    **/
    orderBy?: Enumerable<mst_areaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing mst_areas.
     * 
    **/
    cursor?: mst_areaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mst_areas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mst_areas.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Mst_areaScalarFieldEnum>
  }


  /**
   * mst_area create
   */
  export type mst_areaCreateArgs = {
    /**
     * Select specific fields to fetch from the mst_area
     * 
    **/
    select?: mst_areaSelect | null
    /**
     * The data needed to create a mst_area.
     * 
    **/
    data: XOR<mst_areaCreateInput, mst_areaUncheckedCreateInput>
  }


  /**
   * mst_area createMany
   */
  export type mst_areaCreateManyArgs = {
    /**
     * The data used to create many mst_areas.
     * 
    **/
    data: Enumerable<mst_areaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * mst_area update
   */
  export type mst_areaUpdateArgs = {
    /**
     * Select specific fields to fetch from the mst_area
     * 
    **/
    select?: mst_areaSelect | null
    /**
     * The data needed to update a mst_area.
     * 
    **/
    data: XOR<mst_areaUpdateInput, mst_areaUncheckedUpdateInput>
    /**
     * Choose, which mst_area to update.
     * 
    **/
    where: mst_areaWhereUniqueInput
  }


  /**
   * mst_area updateMany
   */
  export type mst_areaUpdateManyArgs = {
    /**
     * The data used to update mst_areas.
     * 
    **/
    data: XOR<mst_areaUpdateManyMutationInput, mst_areaUncheckedUpdateManyInput>
    /**
     * Filter which mst_areas to update
     * 
    **/
    where?: mst_areaWhereInput
  }


  /**
   * mst_area upsert
   */
  export type mst_areaUpsertArgs = {
    /**
     * Select specific fields to fetch from the mst_area
     * 
    **/
    select?: mst_areaSelect | null
    /**
     * The filter to search for the mst_area to update in case it exists.
     * 
    **/
    where: mst_areaWhereUniqueInput
    /**
     * In case the mst_area found by the `where` argument doesn't exist, create a new mst_area with this data.
     * 
    **/
    create: XOR<mst_areaCreateInput, mst_areaUncheckedCreateInput>
    /**
     * In case the mst_area was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<mst_areaUpdateInput, mst_areaUncheckedUpdateInput>
  }


  /**
   * mst_area delete
   */
  export type mst_areaDeleteArgs = {
    /**
     * Select specific fields to fetch from the mst_area
     * 
    **/
    select?: mst_areaSelect | null
    /**
     * Filter which mst_area to delete.
     * 
    **/
    where: mst_areaWhereUniqueInput
  }


  /**
   * mst_area deleteMany
   */
  export type mst_areaDeleteManyArgs = {
    /**
     * Filter which mst_areas to delete
     * 
    **/
    where?: mst_areaWhereInput
  }


  /**
   * mst_area without action
   */
  export type mst_areaArgs = {
    /**
     * Select specific fields to fetch from the mst_area
     * 
    **/
    select?: mst_areaSelect | null
  }



  /**
   * Model tbl_cluster
   */


  export type AggregateTbl_cluster = {
    _count: Tbl_clusterCountAggregateOutputType | null
    _avg: Tbl_clusterAvgAggregateOutputType | null
    _sum: Tbl_clusterSumAggregateOutputType | null
    _min: Tbl_clusterMinAggregateOutputType | null
    _max: Tbl_clusterMaxAggregateOutputType | null
  }

  export type Tbl_clusterAvgAggregateOutputType = {
    id_cluster: number | null
    id_area: number | null
    flag_active: number | null
  }

  export type Tbl_clusterSumAggregateOutputType = {
    id_cluster: number | null
    id_area: number | null
    flag_active: number | null
  }

  export type Tbl_clusterMinAggregateOutputType = {
    id_cluster: number | null
    nama_cluster: string | null
    id_area: number | null
    flag_active: number | null
    createdAt: Date | null
    modifiedAt: Date | null
    id_sub_areas: string | null
  }

  export type Tbl_clusterMaxAggregateOutputType = {
    id_cluster: number | null
    nama_cluster: string | null
    id_area: number | null
    flag_active: number | null
    createdAt: Date | null
    modifiedAt: Date | null
    id_sub_areas: string | null
  }

  export type Tbl_clusterCountAggregateOutputType = {
    id_cluster: number
    nama_cluster: number
    id_area: number
    flag_active: number
    createdAt: number
    modifiedAt: number
    id_sub_areas: number
    _all: number
  }


  export type Tbl_clusterAvgAggregateInputType = {
    id_cluster?: true
    id_area?: true
    flag_active?: true
  }

  export type Tbl_clusterSumAggregateInputType = {
    id_cluster?: true
    id_area?: true
    flag_active?: true
  }

  export type Tbl_clusterMinAggregateInputType = {
    id_cluster?: true
    nama_cluster?: true
    id_area?: true
    flag_active?: true
    createdAt?: true
    modifiedAt?: true
    id_sub_areas?: true
  }

  export type Tbl_clusterMaxAggregateInputType = {
    id_cluster?: true
    nama_cluster?: true
    id_area?: true
    flag_active?: true
    createdAt?: true
    modifiedAt?: true
    id_sub_areas?: true
  }

  export type Tbl_clusterCountAggregateInputType = {
    id_cluster?: true
    nama_cluster?: true
    id_area?: true
    flag_active?: true
    createdAt?: true
    modifiedAt?: true
    id_sub_areas?: true
    _all?: true
  }

  export type Tbl_clusterAggregateArgs = {
    /**
     * Filter which tbl_cluster to aggregate.
     * 
    **/
    where?: tbl_clusterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_clusters to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_clusterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: tbl_clusterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_clusters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_clusters.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tbl_clusters
    **/
    _count?: true | Tbl_clusterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Tbl_clusterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Tbl_clusterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Tbl_clusterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Tbl_clusterMaxAggregateInputType
  }

  export type GetTbl_clusterAggregateType<T extends Tbl_clusterAggregateArgs> = {
        [P in keyof T & keyof AggregateTbl_cluster]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTbl_cluster[P]>
      : GetScalarType<T[P], AggregateTbl_cluster[P]>
  }




  export type Tbl_clusterGroupByArgs = {
    where?: tbl_clusterWhereInput
    orderBy?: Enumerable<tbl_clusterOrderByWithAggregationInput>
    by: Array<Tbl_clusterScalarFieldEnum>
    having?: tbl_clusterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Tbl_clusterCountAggregateInputType | true
    _avg?: Tbl_clusterAvgAggregateInputType
    _sum?: Tbl_clusterSumAggregateInputType
    _min?: Tbl_clusterMinAggregateInputType
    _max?: Tbl_clusterMaxAggregateInputType
  }


  export type Tbl_clusterGroupByOutputType = {
    id_cluster: number
    nama_cluster: string | null
    id_area: number | null
    flag_active: number | null
    createdAt: Date | null
    modifiedAt: Date | null
    id_sub_areas: string | null
    _count: Tbl_clusterCountAggregateOutputType | null
    _avg: Tbl_clusterAvgAggregateOutputType | null
    _sum: Tbl_clusterSumAggregateOutputType | null
    _min: Tbl_clusterMinAggregateOutputType | null
    _max: Tbl_clusterMaxAggregateOutputType | null
  }

  type GetTbl_clusterGroupByPayload<T extends Tbl_clusterGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Tbl_clusterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Tbl_clusterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Tbl_clusterGroupByOutputType[P]>
            : GetScalarType<T[P], Tbl_clusterGroupByOutputType[P]>
        }
      >
    >


  export type tbl_clusterSelect = {
    id_cluster?: boolean
    nama_cluster?: boolean
    id_area?: boolean
    flag_active?: boolean
    createdAt?: boolean
    modifiedAt?: boolean
    id_sub_areas?: boolean
    tbl_goals?: boolean | tbl_goalsFindManyArgs
    _count?: boolean | Tbl_clusterCountOutputTypeArgs
  }

  export type tbl_clusterInclude = {
    tbl_goals?: boolean | tbl_goalsFindManyArgs
    _count?: boolean | Tbl_clusterCountOutputTypeArgs
  }

  export type tbl_clusterGetPayload<
    S extends boolean | null | undefined | tbl_clusterArgs,
    U = keyof S
      > = S extends true
        ? tbl_cluster
    : S extends undefined
    ? never
    : S extends tbl_clusterArgs | tbl_clusterFindManyArgs
    ?'include' extends U
    ? tbl_cluster  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tbl_goals' ? Array < tbl_goalsGetPayload<S['include'][P]>>  :
        P extends '_count' ? Tbl_clusterCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tbl_goals' ? Array < tbl_goalsGetPayload<S['select'][P]>>  :
        P extends '_count' ? Tbl_clusterCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof tbl_cluster ? tbl_cluster[P] : never
  } 
    : tbl_cluster
  : tbl_cluster


  type tbl_clusterCountArgs = Merge<
    Omit<tbl_clusterFindManyArgs, 'select' | 'include'> & {
      select?: Tbl_clusterCountAggregateInputType | true
    }
  >

  export interface tbl_clusterDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Tbl_cluster that matches the filter.
     * @param {tbl_clusterFindUniqueArgs} args - Arguments to find a Tbl_cluster
     * @example
     * // Get one Tbl_cluster
     * const tbl_cluster = await prisma.tbl_cluster.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tbl_clusterFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, tbl_clusterFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'tbl_cluster'> extends True ? CheckSelect<T, Prisma__tbl_clusterClient<tbl_cluster>, Prisma__tbl_clusterClient<tbl_clusterGetPayload<T>>> : CheckSelect<T, Prisma__tbl_clusterClient<tbl_cluster | null >, Prisma__tbl_clusterClient<tbl_clusterGetPayload<T> | null >>

    /**
     * Find the first Tbl_cluster that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_clusterFindFirstArgs} args - Arguments to find a Tbl_cluster
     * @example
     * // Get one Tbl_cluster
     * const tbl_cluster = await prisma.tbl_cluster.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tbl_clusterFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, tbl_clusterFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'tbl_cluster'> extends True ? CheckSelect<T, Prisma__tbl_clusterClient<tbl_cluster>, Prisma__tbl_clusterClient<tbl_clusterGetPayload<T>>> : CheckSelect<T, Prisma__tbl_clusterClient<tbl_cluster | null >, Prisma__tbl_clusterClient<tbl_clusterGetPayload<T> | null >>

    /**
     * Find zero or more Tbl_clusters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_clusterFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tbl_clusters
     * const tbl_clusters = await prisma.tbl_cluster.findMany()
     * 
     * // Get first 10 Tbl_clusters
     * const tbl_clusters = await prisma.tbl_cluster.findMany({ take: 10 })
     * 
     * // Only select the `id_cluster`
     * const tbl_clusterWithId_clusterOnly = await prisma.tbl_cluster.findMany({ select: { id_cluster: true } })
     * 
    **/
    findMany<T extends tbl_clusterFindManyArgs>(
      args?: SelectSubset<T, tbl_clusterFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<tbl_cluster>>, PrismaPromise<Array<tbl_clusterGetPayload<T>>>>

    /**
     * Create a Tbl_cluster.
     * @param {tbl_clusterCreateArgs} args - Arguments to create a Tbl_cluster.
     * @example
     * // Create one Tbl_cluster
     * const Tbl_cluster = await prisma.tbl_cluster.create({
     *   data: {
     *     // ... data to create a Tbl_cluster
     *   }
     * })
     * 
    **/
    create<T extends tbl_clusterCreateArgs>(
      args: SelectSubset<T, tbl_clusterCreateArgs>
    ): CheckSelect<T, Prisma__tbl_clusterClient<tbl_cluster>, Prisma__tbl_clusterClient<tbl_clusterGetPayload<T>>>

    /**
     * Create many Tbl_clusters.
     *     @param {tbl_clusterCreateManyArgs} args - Arguments to create many Tbl_clusters.
     *     @example
     *     // Create many Tbl_clusters
     *     const tbl_cluster = await prisma.tbl_cluster.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tbl_clusterCreateManyArgs>(
      args?: SelectSubset<T, tbl_clusterCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Tbl_cluster.
     * @param {tbl_clusterDeleteArgs} args - Arguments to delete one Tbl_cluster.
     * @example
     * // Delete one Tbl_cluster
     * const Tbl_cluster = await prisma.tbl_cluster.delete({
     *   where: {
     *     // ... filter to delete one Tbl_cluster
     *   }
     * })
     * 
    **/
    delete<T extends tbl_clusterDeleteArgs>(
      args: SelectSubset<T, tbl_clusterDeleteArgs>
    ): CheckSelect<T, Prisma__tbl_clusterClient<tbl_cluster>, Prisma__tbl_clusterClient<tbl_clusterGetPayload<T>>>

    /**
     * Update one Tbl_cluster.
     * @param {tbl_clusterUpdateArgs} args - Arguments to update one Tbl_cluster.
     * @example
     * // Update one Tbl_cluster
     * const tbl_cluster = await prisma.tbl_cluster.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tbl_clusterUpdateArgs>(
      args: SelectSubset<T, tbl_clusterUpdateArgs>
    ): CheckSelect<T, Prisma__tbl_clusterClient<tbl_cluster>, Prisma__tbl_clusterClient<tbl_clusterGetPayload<T>>>

    /**
     * Delete zero or more Tbl_clusters.
     * @param {tbl_clusterDeleteManyArgs} args - Arguments to filter Tbl_clusters to delete.
     * @example
     * // Delete a few Tbl_clusters
     * const { count } = await prisma.tbl_cluster.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tbl_clusterDeleteManyArgs>(
      args?: SelectSubset<T, tbl_clusterDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tbl_clusters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_clusterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tbl_clusters
     * const tbl_cluster = await prisma.tbl_cluster.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tbl_clusterUpdateManyArgs>(
      args: SelectSubset<T, tbl_clusterUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tbl_cluster.
     * @param {tbl_clusterUpsertArgs} args - Arguments to update or create a Tbl_cluster.
     * @example
     * // Update or create a Tbl_cluster
     * const tbl_cluster = await prisma.tbl_cluster.upsert({
     *   create: {
     *     // ... data to create a Tbl_cluster
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tbl_cluster we want to update
     *   }
     * })
    **/
    upsert<T extends tbl_clusterUpsertArgs>(
      args: SelectSubset<T, tbl_clusterUpsertArgs>
    ): CheckSelect<T, Prisma__tbl_clusterClient<tbl_cluster>, Prisma__tbl_clusterClient<tbl_clusterGetPayload<T>>>

    /**
     * Count the number of Tbl_clusters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tbl_clusterCountArgs} args - Arguments to filter Tbl_clusters to count.
     * @example
     * // Count the number of Tbl_clusters
     * const count = await prisma.tbl_cluster.count({
     *   where: {
     *     // ... the filter for the Tbl_clusters we want to count
     *   }
     * })
    **/
    count<T extends tbl_clusterCountArgs>(
      args?: Subset<T, tbl_clusterCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Tbl_clusterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tbl_cluster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_clusterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Tbl_clusterAggregateArgs>(args: Subset<T, Tbl_clusterAggregateArgs>): PrismaPromise<GetTbl_clusterAggregateType<T>>

    /**
     * Group by Tbl_cluster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tbl_clusterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Tbl_clusterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Tbl_clusterGroupByArgs['orderBy'] }
        : { orderBy?: Tbl_clusterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Tbl_clusterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTbl_clusterGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for tbl_cluster.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tbl_clusterClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tbl_goals<T extends tbl_goalsFindManyArgs = {}>(args?: Subset<T, tbl_goalsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<tbl_goals>>, PrismaPromise<Array<tbl_goalsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * tbl_cluster findUnique
   */
  export type tbl_clusterFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the tbl_cluster
     * 
    **/
    select?: tbl_clusterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_clusterInclude | null
    /**
     * Throw an Error if a tbl_cluster can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tbl_cluster to fetch.
     * 
    **/
    where: tbl_clusterWhereUniqueInput
  }


  /**
   * tbl_cluster findFirst
   */
  export type tbl_clusterFindFirstArgs = {
    /**
     * Select specific fields to fetch from the tbl_cluster
     * 
    **/
    select?: tbl_clusterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_clusterInclude | null
    /**
     * Throw an Error if a tbl_cluster can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which tbl_cluster to fetch.
     * 
    **/
    where?: tbl_clusterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_clusters to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_clusterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tbl_clusters.
     * 
    **/
    cursor?: tbl_clusterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_clusters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_clusters.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tbl_clusters.
     * 
    **/
    distinct?: Enumerable<Tbl_clusterScalarFieldEnum>
  }


  /**
   * tbl_cluster findMany
   */
  export type tbl_clusterFindManyArgs = {
    /**
     * Select specific fields to fetch from the tbl_cluster
     * 
    **/
    select?: tbl_clusterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_clusterInclude | null
    /**
     * Filter, which tbl_clusters to fetch.
     * 
    **/
    where?: tbl_clusterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tbl_clusters to fetch.
     * 
    **/
    orderBy?: Enumerable<tbl_clusterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tbl_clusters.
     * 
    **/
    cursor?: tbl_clusterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tbl_clusters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tbl_clusters.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Tbl_clusterScalarFieldEnum>
  }


  /**
   * tbl_cluster create
   */
  export type tbl_clusterCreateArgs = {
    /**
     * Select specific fields to fetch from the tbl_cluster
     * 
    **/
    select?: tbl_clusterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_clusterInclude | null
    /**
     * The data needed to create a tbl_cluster.
     * 
    **/
    data: XOR<tbl_clusterCreateInput, tbl_clusterUncheckedCreateInput>
  }


  /**
   * tbl_cluster createMany
   */
  export type tbl_clusterCreateManyArgs = {
    /**
     * The data used to create many tbl_clusters.
     * 
    **/
    data: Enumerable<tbl_clusterCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * tbl_cluster update
   */
  export type tbl_clusterUpdateArgs = {
    /**
     * Select specific fields to fetch from the tbl_cluster
     * 
    **/
    select?: tbl_clusterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_clusterInclude | null
    /**
     * The data needed to update a tbl_cluster.
     * 
    **/
    data: XOR<tbl_clusterUpdateInput, tbl_clusterUncheckedUpdateInput>
    /**
     * Choose, which tbl_cluster to update.
     * 
    **/
    where: tbl_clusterWhereUniqueInput
  }


  /**
   * tbl_cluster updateMany
   */
  export type tbl_clusterUpdateManyArgs = {
    /**
     * The data used to update tbl_clusters.
     * 
    **/
    data: XOR<tbl_clusterUpdateManyMutationInput, tbl_clusterUncheckedUpdateManyInput>
    /**
     * Filter which tbl_clusters to update
     * 
    **/
    where?: tbl_clusterWhereInput
  }


  /**
   * tbl_cluster upsert
   */
  export type tbl_clusterUpsertArgs = {
    /**
     * Select specific fields to fetch from the tbl_cluster
     * 
    **/
    select?: tbl_clusterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_clusterInclude | null
    /**
     * The filter to search for the tbl_cluster to update in case it exists.
     * 
    **/
    where: tbl_clusterWhereUniqueInput
    /**
     * In case the tbl_cluster found by the `where` argument doesn't exist, create a new tbl_cluster with this data.
     * 
    **/
    create: XOR<tbl_clusterCreateInput, tbl_clusterUncheckedCreateInput>
    /**
     * In case the tbl_cluster was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<tbl_clusterUpdateInput, tbl_clusterUncheckedUpdateInput>
  }


  /**
   * tbl_cluster delete
   */
  export type tbl_clusterDeleteArgs = {
    /**
     * Select specific fields to fetch from the tbl_cluster
     * 
    **/
    select?: tbl_clusterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_clusterInclude | null
    /**
     * Filter which tbl_cluster to delete.
     * 
    **/
    where: tbl_clusterWhereUniqueInput
  }


  /**
   * tbl_cluster deleteMany
   */
  export type tbl_clusterDeleteManyArgs = {
    /**
     * Filter which tbl_clusters to delete
     * 
    **/
    where?: tbl_clusterWhereInput
  }


  /**
   * tbl_cluster without action
   */
  export type tbl_clusterArgs = {
    /**
     * Select specific fields to fetch from the tbl_cluster
     * 
    **/
    select?: tbl_clusterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: tbl_clusterInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const Tbl_usersScalarFieldEnum: {
    id_user: 'id_user',
    name: 'name',
    pass: 'pass',
    flag_active: 'flag_active',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    firstName: 'firstName',
    lastName: 'lastName',
    apps: 'apps',
    role: 'role',
    id_area: 'id_area',
    id_sub_area: 'id_sub_area'
  };

  export type Tbl_usersScalarFieldEnum = (typeof Tbl_usersScalarFieldEnum)[keyof typeof Tbl_usersScalarFieldEnum]


  export const Tbl_menuScalarFieldEnum: {
    id_menu: 'id_menu',
    menu_name: 'menu_name',
    menu_link: 'menu_link',
    role: 'role'
  };

  export type Tbl_menuScalarFieldEnum = (typeof Tbl_menuScalarFieldEnum)[keyof typeof Tbl_menuScalarFieldEnum]


  export const Tbl_goalsScalarFieldEnum: {
    id_goals: 'id_goals',
    issue_goals: 'issue_goals',
    title_goals: 'title_goals',
    desc_goals: 'desc_goals',
    pic_goals: 'pic_goals',
    start_date: 'start_date',
    due_date: 'due_date',
    status_goals: 'status_goals',
    progress: 'progress',
    parent_goals: 'parent_goals',
    type_goals: 'type_goals',
    last_modified_date: 'last_modified_date',
    indikator: 'indikator',
    id_area: 'id_area',
    kodefikasi: 'kodefikasi',
    parent_family: 'parent_family',
    id_cluster: 'id_cluster'
  };

  export type Tbl_goalsScalarFieldEnum = (typeof Tbl_goalsScalarFieldEnum)[keyof typeof Tbl_goalsScalarFieldEnum]


  export const Mst_areaScalarFieldEnum: {
    id_area: 'id_area',
    id_sub_area: 'id_sub_area',
    desc_area: 'desc_area',
    desc_sub_area: 'desc_sub_area',
    id_parent_area: 'id_parent_area',
    active: 'active'
  };

  export type Mst_areaScalarFieldEnum = (typeof Mst_areaScalarFieldEnum)[keyof typeof Mst_areaScalarFieldEnum]


  export const Tbl_clusterScalarFieldEnum: {
    id_cluster: 'id_cluster',
    nama_cluster: 'nama_cluster',
    id_area: 'id_area',
    flag_active: 'flag_active',
    createdAt: 'createdAt',
    modifiedAt: 'modifiedAt',
    id_sub_areas: 'id_sub_areas'
  };

  export type Tbl_clusterScalarFieldEnum = (typeof Tbl_clusterScalarFieldEnum)[keyof typeof Tbl_clusterScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: 'DbNull',
    JsonNull: 'JsonNull'
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueFilter: {
    DbNull: 'DbNull',
    JsonNull: 'JsonNull',
    AnyNull: 'AnyNull'
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Deep Input Types
   */


  export type tbl_usersWhereInput = {
    AND?: Enumerable<tbl_usersWhereInput>
    OR?: Enumerable<tbl_usersWhereInput>
    NOT?: Enumerable<tbl_usersWhereInput>
    id_user?: IntFilter | number
    name?: StringNullableFilter | string | null
    pass?: StringNullableFilter | string | null
    flag_active?: BoolNullableFilter | boolean | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    firstName?: StringNullableFilter | string | null
    lastName?: StringNullableFilter | string | null
    apps?: StringNullableFilter | string | null
    role?: StringNullableFilter | string | null
    id_area?: IntNullableFilter | number | null
    id_sub_area?: IntNullableFilter | number | null
  }

  export type tbl_usersOrderByWithRelationInput = {
    id_user?: SortOrder
    name?: SortOrder
    pass?: SortOrder
    flag_active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    apps?: SortOrder
    role?: SortOrder
    id_area?: SortOrder
    id_sub_area?: SortOrder
  }

  export type tbl_usersWhereUniqueInput = {
    id_user?: number
  }

  export type tbl_usersOrderByWithAggregationInput = {
    id_user?: SortOrder
    name?: SortOrder
    pass?: SortOrder
    flag_active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    apps?: SortOrder
    role?: SortOrder
    id_area?: SortOrder
    id_sub_area?: SortOrder
    _count?: tbl_usersCountOrderByAggregateInput
    _avg?: tbl_usersAvgOrderByAggregateInput
    _max?: tbl_usersMaxOrderByAggregateInput
    _min?: tbl_usersMinOrderByAggregateInput
    _sum?: tbl_usersSumOrderByAggregateInput
  }

  export type tbl_usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbl_usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbl_usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbl_usersScalarWhereWithAggregatesInput>
    id_user?: IntWithAggregatesFilter | number
    name?: StringNullableWithAggregatesFilter | string | null
    pass?: StringNullableWithAggregatesFilter | string | null
    flag_active?: BoolNullableWithAggregatesFilter | boolean | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    firstName?: StringNullableWithAggregatesFilter | string | null
    lastName?: StringNullableWithAggregatesFilter | string | null
    apps?: StringNullableWithAggregatesFilter | string | null
    role?: StringNullableWithAggregatesFilter | string | null
    id_area?: IntNullableWithAggregatesFilter | number | null
    id_sub_area?: IntNullableWithAggregatesFilter | number | null
  }

  export type tbl_menuWhereInput = {
    AND?: Enumerable<tbl_menuWhereInput>
    OR?: Enumerable<tbl_menuWhereInput>
    NOT?: Enumerable<tbl_menuWhereInput>
    id_menu?: IntFilter | number
    menu_name?: StringNullableFilter | string | null
    menu_link?: StringNullableFilter | string | null
    role?: StringNullableFilter | string | null
  }

  export type tbl_menuOrderByWithRelationInput = {
    id_menu?: SortOrder
    menu_name?: SortOrder
    menu_link?: SortOrder
    role?: SortOrder
  }

  export type tbl_menuWhereUniqueInput = {
    id_menu?: number
  }

  export type tbl_menuOrderByWithAggregationInput = {
    id_menu?: SortOrder
    menu_name?: SortOrder
    menu_link?: SortOrder
    role?: SortOrder
    _count?: tbl_menuCountOrderByAggregateInput
    _avg?: tbl_menuAvgOrderByAggregateInput
    _max?: tbl_menuMaxOrderByAggregateInput
    _min?: tbl_menuMinOrderByAggregateInput
    _sum?: tbl_menuSumOrderByAggregateInput
  }

  export type tbl_menuScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbl_menuScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbl_menuScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbl_menuScalarWhereWithAggregatesInput>
    id_menu?: IntWithAggregatesFilter | number
    menu_name?: StringNullableWithAggregatesFilter | string | null
    menu_link?: StringNullableWithAggregatesFilter | string | null
    role?: StringNullableWithAggregatesFilter | string | null
  }

  export type tbl_goalsWhereInput = {
    AND?: Enumerable<tbl_goalsWhereInput>
    OR?: Enumerable<tbl_goalsWhereInput>
    NOT?: Enumerable<tbl_goalsWhereInput>
    id_goals?: IntFilter | number
    issue_goals?: StringNullableFilter | string | null
    title_goals?: StringNullableFilter | string | null
    desc_goals?: StringNullableFilter | string | null
    pic_goals?: StringNullableFilter | string | null
    start_date?: DateTimeNullableFilter | Date | string | null
    due_date?: DateTimeNullableFilter | Date | string | null
    status_goals?: IntNullableFilter | number | null
    progress?: IntNullableFilter | number | null
    parent_goals?: IntNullableFilter | number | null
    type_goals?: JsonNullableFilter
    last_modified_date?: DateTimeNullableFilter | Date | string | null
    indikator?: JsonNullableFilter
    id_area?: IntNullableFilter | number | null
    kodefikasi?: StringNullableFilter | string | null
    parent_family?: IntNullableFilter | number | null
    tbl_cluster?: XOR<Tbl_clusterRelationFilter, tbl_clusterWhereInput> | null
    id_cluster?: IntNullableFilter | number | null
  }

  export type tbl_goalsOrderByWithRelationInput = {
    id_goals?: SortOrder
    issue_goals?: SortOrder
    title_goals?: SortOrder
    desc_goals?: SortOrder
    pic_goals?: SortOrder
    start_date?: SortOrder
    due_date?: SortOrder
    status_goals?: SortOrder
    progress?: SortOrder
    parent_goals?: SortOrder
    type_goals?: SortOrder
    last_modified_date?: SortOrder
    indikator?: SortOrder
    id_area?: SortOrder
    kodefikasi?: SortOrder
    parent_family?: SortOrder
    tbl_cluster?: tbl_clusterOrderByWithRelationInput
    id_cluster?: SortOrder
  }

  export type tbl_goalsWhereUniqueInput = {
    id_goals?: number
  }

  export type tbl_goalsOrderByWithAggregationInput = {
    id_goals?: SortOrder
    issue_goals?: SortOrder
    title_goals?: SortOrder
    desc_goals?: SortOrder
    pic_goals?: SortOrder
    start_date?: SortOrder
    due_date?: SortOrder
    status_goals?: SortOrder
    progress?: SortOrder
    parent_goals?: SortOrder
    type_goals?: SortOrder
    last_modified_date?: SortOrder
    indikator?: SortOrder
    id_area?: SortOrder
    kodefikasi?: SortOrder
    parent_family?: SortOrder
    id_cluster?: SortOrder
    _count?: tbl_goalsCountOrderByAggregateInput
    _avg?: tbl_goalsAvgOrderByAggregateInput
    _max?: tbl_goalsMaxOrderByAggregateInput
    _min?: tbl_goalsMinOrderByAggregateInput
    _sum?: tbl_goalsSumOrderByAggregateInput
  }

  export type tbl_goalsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbl_goalsScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbl_goalsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbl_goalsScalarWhereWithAggregatesInput>
    id_goals?: IntWithAggregatesFilter | number
    issue_goals?: StringNullableWithAggregatesFilter | string | null
    title_goals?: StringNullableWithAggregatesFilter | string | null
    desc_goals?: StringNullableWithAggregatesFilter | string | null
    pic_goals?: StringNullableWithAggregatesFilter | string | null
    start_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    due_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    status_goals?: IntNullableWithAggregatesFilter | number | null
    progress?: IntNullableWithAggregatesFilter | number | null
    parent_goals?: IntNullableWithAggregatesFilter | number | null
    type_goals?: JsonNullableWithAggregatesFilter
    last_modified_date?: DateTimeNullableWithAggregatesFilter | Date | string | null
    indikator?: JsonNullableWithAggregatesFilter
    id_area?: IntNullableWithAggregatesFilter | number | null
    kodefikasi?: StringNullableWithAggregatesFilter | string | null
    parent_family?: IntNullableWithAggregatesFilter | number | null
    id_cluster?: IntNullableWithAggregatesFilter | number | null
  }

  export type mst_areaWhereInput = {
    AND?: Enumerable<mst_areaWhereInput>
    OR?: Enumerable<mst_areaWhereInput>
    NOT?: Enumerable<mst_areaWhereInput>
    id_area?: IntFilter | number
    id_sub_area?: IntFilter | number
    desc_area?: StringNullableFilter | string | null
    desc_sub_area?: StringNullableFilter | string | null
    id_parent_area?: IntNullableFilter | number | null
    active?: IntNullableFilter | number | null
  }

  export type mst_areaOrderByWithRelationInput = {
    id_area?: SortOrder
    id_sub_area?: SortOrder
    desc_area?: SortOrder
    desc_sub_area?: SortOrder
    id_parent_area?: SortOrder
    active?: SortOrder
  }

  export type mst_areaWhereUniqueInput = {
    id_sub_area?: number
  }

  export type mst_areaOrderByWithAggregationInput = {
    id_area?: SortOrder
    id_sub_area?: SortOrder
    desc_area?: SortOrder
    desc_sub_area?: SortOrder
    id_parent_area?: SortOrder
    active?: SortOrder
    _count?: mst_areaCountOrderByAggregateInput
    _avg?: mst_areaAvgOrderByAggregateInput
    _max?: mst_areaMaxOrderByAggregateInput
    _min?: mst_areaMinOrderByAggregateInput
    _sum?: mst_areaSumOrderByAggregateInput
  }

  export type mst_areaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<mst_areaScalarWhereWithAggregatesInput>
    OR?: Enumerable<mst_areaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<mst_areaScalarWhereWithAggregatesInput>
    id_area?: IntWithAggregatesFilter | number
    id_sub_area?: IntWithAggregatesFilter | number
    desc_area?: StringNullableWithAggregatesFilter | string | null
    desc_sub_area?: StringNullableWithAggregatesFilter | string | null
    id_parent_area?: IntNullableWithAggregatesFilter | number | null
    active?: IntNullableWithAggregatesFilter | number | null
  }

  export type tbl_clusterWhereInput = {
    AND?: Enumerable<tbl_clusterWhereInput>
    OR?: Enumerable<tbl_clusterWhereInput>
    NOT?: Enumerable<tbl_clusterWhereInput>
    id_cluster?: IntFilter | number
    nama_cluster?: StringNullableFilter | string | null
    id_area?: IntNullableFilter | number | null
    flag_active?: IntNullableFilter | number | null
    createdAt?: DateTimeNullableFilter | Date | string | null
    modifiedAt?: DateTimeNullableFilter | Date | string | null
    id_sub_areas?: StringNullableFilter | string | null
    tbl_goals?: Tbl_goalsListRelationFilter
  }

  export type tbl_clusterOrderByWithRelationInput = {
    id_cluster?: SortOrder
    nama_cluster?: SortOrder
    id_area?: SortOrder
    flag_active?: SortOrder
    createdAt?: SortOrder
    modifiedAt?: SortOrder
    id_sub_areas?: SortOrder
    tbl_goals?: tbl_goalsOrderByRelationAggregateInput
  }

  export type tbl_clusterWhereUniqueInput = {
    id_cluster?: number
  }

  export type tbl_clusterOrderByWithAggregationInput = {
    id_cluster?: SortOrder
    nama_cluster?: SortOrder
    id_area?: SortOrder
    flag_active?: SortOrder
    createdAt?: SortOrder
    modifiedAt?: SortOrder
    id_sub_areas?: SortOrder
    _count?: tbl_clusterCountOrderByAggregateInput
    _avg?: tbl_clusterAvgOrderByAggregateInput
    _max?: tbl_clusterMaxOrderByAggregateInput
    _min?: tbl_clusterMinOrderByAggregateInput
    _sum?: tbl_clusterSumOrderByAggregateInput
  }

  export type tbl_clusterScalarWhereWithAggregatesInput = {
    AND?: Enumerable<tbl_clusterScalarWhereWithAggregatesInput>
    OR?: Enumerable<tbl_clusterScalarWhereWithAggregatesInput>
    NOT?: Enumerable<tbl_clusterScalarWhereWithAggregatesInput>
    id_cluster?: IntWithAggregatesFilter | number
    nama_cluster?: StringNullableWithAggregatesFilter | string | null
    id_area?: IntNullableWithAggregatesFilter | number | null
    flag_active?: IntNullableWithAggregatesFilter | number | null
    createdAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    modifiedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    id_sub_areas?: StringNullableWithAggregatesFilter | string | null
  }

  export type tbl_usersCreateInput = {
    name?: string | null
    pass?: string | null
    flag_active?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    apps?: string | null
    role?: string | null
    id_area?: number | null
    id_sub_area?: number | null
  }

  export type tbl_usersUncheckedCreateInput = {
    id_user?: number
    name?: string | null
    pass?: string | null
    flag_active?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    apps?: string | null
    role?: string | null
    id_area?: number | null
    id_sub_area?: number | null
  }

  export type tbl_usersUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    pass?: NullableStringFieldUpdateOperationsInput | string | null
    flag_active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    apps?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    id_area?: NullableIntFieldUpdateOperationsInput | number | null
    id_sub_area?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type tbl_usersUncheckedUpdateInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    pass?: NullableStringFieldUpdateOperationsInput | string | null
    flag_active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    apps?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    id_area?: NullableIntFieldUpdateOperationsInput | number | null
    id_sub_area?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type tbl_usersCreateManyInput = {
    id_user?: number
    name?: string | null
    pass?: string | null
    flag_active?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName?: string | null
    lastName?: string | null
    apps?: string | null
    role?: string | null
    id_area?: number | null
    id_sub_area?: number | null
  }

  export type tbl_usersUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    pass?: NullableStringFieldUpdateOperationsInput | string | null
    flag_active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    apps?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    id_area?: NullableIntFieldUpdateOperationsInput | number | null
    id_sub_area?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type tbl_usersUncheckedUpdateManyInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    pass?: NullableStringFieldUpdateOperationsInput | string | null
    flag_active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    apps?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
    id_area?: NullableIntFieldUpdateOperationsInput | number | null
    id_sub_area?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type tbl_menuCreateInput = {
    menu_name?: string | null
    menu_link?: string | null
    role?: string | null
  }

  export type tbl_menuUncheckedCreateInput = {
    id_menu?: number
    menu_name?: string | null
    menu_link?: string | null
    role?: string | null
  }

  export type tbl_menuUpdateInput = {
    menu_name?: NullableStringFieldUpdateOperationsInput | string | null
    menu_link?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbl_menuUncheckedUpdateInput = {
    id_menu?: IntFieldUpdateOperationsInput | number
    menu_name?: NullableStringFieldUpdateOperationsInput | string | null
    menu_link?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbl_menuCreateManyInput = {
    id_menu?: number
    menu_name?: string | null
    menu_link?: string | null
    role?: string | null
  }

  export type tbl_menuUpdateManyMutationInput = {
    menu_name?: NullableStringFieldUpdateOperationsInput | string | null
    menu_link?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbl_menuUncheckedUpdateManyInput = {
    id_menu?: IntFieldUpdateOperationsInput | number
    menu_name?: NullableStringFieldUpdateOperationsInput | string | null
    menu_link?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbl_goalsCreateInput = {
    issue_goals?: string | null
    title_goals?: string | null
    desc_goals?: string | null
    pic_goals?: string | null
    start_date?: Date | string | null
    due_date?: Date | string | null
    status_goals?: number | null
    progress?: number | null
    parent_goals?: number | null
    type_goals?: NullableJsonNullValueInput | InputJsonValue
    last_modified_date?: Date | string | null
    indikator?: NullableJsonNullValueInput | InputJsonValue
    id_area?: number | null
    kodefikasi?: string | null
    parent_family?: number | null
    tbl_cluster?: tbl_clusterCreateNestedOneWithoutTbl_goalsInput
  }

  export type tbl_goalsUncheckedCreateInput = {
    id_goals?: number
    issue_goals?: string | null
    title_goals?: string | null
    desc_goals?: string | null
    pic_goals?: string | null
    start_date?: Date | string | null
    due_date?: Date | string | null
    status_goals?: number | null
    progress?: number | null
    parent_goals?: number | null
    type_goals?: NullableJsonNullValueInput | InputJsonValue
    last_modified_date?: Date | string | null
    indikator?: NullableJsonNullValueInput | InputJsonValue
    id_area?: number | null
    kodefikasi?: string | null
    parent_family?: number | null
    id_cluster?: number | null
  }

  export type tbl_goalsUpdateInput = {
    issue_goals?: NullableStringFieldUpdateOperationsInput | string | null
    title_goals?: NullableStringFieldUpdateOperationsInput | string | null
    desc_goals?: NullableStringFieldUpdateOperationsInput | string | null
    pic_goals?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status_goals?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: NullableIntFieldUpdateOperationsInput | number | null
    parent_goals?: NullableIntFieldUpdateOperationsInput | number | null
    type_goals?: NullableJsonNullValueInput | InputJsonValue
    last_modified_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    indikator?: NullableJsonNullValueInput | InputJsonValue
    id_area?: NullableIntFieldUpdateOperationsInput | number | null
    kodefikasi?: NullableStringFieldUpdateOperationsInput | string | null
    parent_family?: NullableIntFieldUpdateOperationsInput | number | null
    tbl_cluster?: tbl_clusterUpdateOneWithoutTbl_goalsInput
  }

  export type tbl_goalsUncheckedUpdateInput = {
    id_goals?: IntFieldUpdateOperationsInput | number
    issue_goals?: NullableStringFieldUpdateOperationsInput | string | null
    title_goals?: NullableStringFieldUpdateOperationsInput | string | null
    desc_goals?: NullableStringFieldUpdateOperationsInput | string | null
    pic_goals?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status_goals?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: NullableIntFieldUpdateOperationsInput | number | null
    parent_goals?: NullableIntFieldUpdateOperationsInput | number | null
    type_goals?: NullableJsonNullValueInput | InputJsonValue
    last_modified_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    indikator?: NullableJsonNullValueInput | InputJsonValue
    id_area?: NullableIntFieldUpdateOperationsInput | number | null
    kodefikasi?: NullableStringFieldUpdateOperationsInput | string | null
    parent_family?: NullableIntFieldUpdateOperationsInput | number | null
    id_cluster?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type tbl_goalsCreateManyInput = {
    id_goals?: number
    issue_goals?: string | null
    title_goals?: string | null
    desc_goals?: string | null
    pic_goals?: string | null
    start_date?: Date | string | null
    due_date?: Date | string | null
    status_goals?: number | null
    progress?: number | null
    parent_goals?: number | null
    type_goals?: NullableJsonNullValueInput | InputJsonValue
    last_modified_date?: Date | string | null
    indikator?: NullableJsonNullValueInput | InputJsonValue
    id_area?: number | null
    kodefikasi?: string | null
    parent_family?: number | null
    id_cluster?: number | null
  }

  export type tbl_goalsUpdateManyMutationInput = {
    issue_goals?: NullableStringFieldUpdateOperationsInput | string | null
    title_goals?: NullableStringFieldUpdateOperationsInput | string | null
    desc_goals?: NullableStringFieldUpdateOperationsInput | string | null
    pic_goals?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status_goals?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: NullableIntFieldUpdateOperationsInput | number | null
    parent_goals?: NullableIntFieldUpdateOperationsInput | number | null
    type_goals?: NullableJsonNullValueInput | InputJsonValue
    last_modified_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    indikator?: NullableJsonNullValueInput | InputJsonValue
    id_area?: NullableIntFieldUpdateOperationsInput | number | null
    kodefikasi?: NullableStringFieldUpdateOperationsInput | string | null
    parent_family?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type tbl_goalsUncheckedUpdateManyInput = {
    id_goals?: IntFieldUpdateOperationsInput | number
    issue_goals?: NullableStringFieldUpdateOperationsInput | string | null
    title_goals?: NullableStringFieldUpdateOperationsInput | string | null
    desc_goals?: NullableStringFieldUpdateOperationsInput | string | null
    pic_goals?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status_goals?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: NullableIntFieldUpdateOperationsInput | number | null
    parent_goals?: NullableIntFieldUpdateOperationsInput | number | null
    type_goals?: NullableJsonNullValueInput | InputJsonValue
    last_modified_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    indikator?: NullableJsonNullValueInput | InputJsonValue
    id_area?: NullableIntFieldUpdateOperationsInput | number | null
    kodefikasi?: NullableStringFieldUpdateOperationsInput | string | null
    parent_family?: NullableIntFieldUpdateOperationsInput | number | null
    id_cluster?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type mst_areaCreateInput = {
    id_area: number
    desc_area?: string | null
    desc_sub_area?: string | null
    id_parent_area?: number | null
    active?: number | null
  }

  export type mst_areaUncheckedCreateInput = {
    id_area: number
    id_sub_area?: number
    desc_area?: string | null
    desc_sub_area?: string | null
    id_parent_area?: number | null
    active?: number | null
  }

  export type mst_areaUpdateInput = {
    id_area?: IntFieldUpdateOperationsInput | number
    desc_area?: NullableStringFieldUpdateOperationsInput | string | null
    desc_sub_area?: NullableStringFieldUpdateOperationsInput | string | null
    id_parent_area?: NullableIntFieldUpdateOperationsInput | number | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type mst_areaUncheckedUpdateInput = {
    id_area?: IntFieldUpdateOperationsInput | number
    id_sub_area?: IntFieldUpdateOperationsInput | number
    desc_area?: NullableStringFieldUpdateOperationsInput | string | null
    desc_sub_area?: NullableStringFieldUpdateOperationsInput | string | null
    id_parent_area?: NullableIntFieldUpdateOperationsInput | number | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type mst_areaCreateManyInput = {
    id_area: number
    id_sub_area?: number
    desc_area?: string | null
    desc_sub_area?: string | null
    id_parent_area?: number | null
    active?: number | null
  }

  export type mst_areaUpdateManyMutationInput = {
    id_area?: IntFieldUpdateOperationsInput | number
    desc_area?: NullableStringFieldUpdateOperationsInput | string | null
    desc_sub_area?: NullableStringFieldUpdateOperationsInput | string | null
    id_parent_area?: NullableIntFieldUpdateOperationsInput | number | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type mst_areaUncheckedUpdateManyInput = {
    id_area?: IntFieldUpdateOperationsInput | number
    id_sub_area?: IntFieldUpdateOperationsInput | number
    desc_area?: NullableStringFieldUpdateOperationsInput | string | null
    desc_sub_area?: NullableStringFieldUpdateOperationsInput | string | null
    id_parent_area?: NullableIntFieldUpdateOperationsInput | number | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type tbl_clusterCreateInput = {
    nama_cluster?: string | null
    id_area?: number | null
    flag_active?: number | null
    createdAt?: Date | string | null
    modifiedAt?: Date | string | null
    id_sub_areas?: string | null
    tbl_goals?: tbl_goalsCreateNestedManyWithoutTbl_clusterInput
  }

  export type tbl_clusterUncheckedCreateInput = {
    id_cluster?: number
    nama_cluster?: string | null
    id_area?: number | null
    flag_active?: number | null
    createdAt?: Date | string | null
    modifiedAt?: Date | string | null
    id_sub_areas?: string | null
    tbl_goals?: tbl_goalsUncheckedCreateNestedManyWithoutTbl_clusterInput
  }

  export type tbl_clusterUpdateInput = {
    nama_cluster?: NullableStringFieldUpdateOperationsInput | string | null
    id_area?: NullableIntFieldUpdateOperationsInput | number | null
    flag_active?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id_sub_areas?: NullableStringFieldUpdateOperationsInput | string | null
    tbl_goals?: tbl_goalsUpdateManyWithoutTbl_clusterInput
  }

  export type tbl_clusterUncheckedUpdateInput = {
    id_cluster?: IntFieldUpdateOperationsInput | number
    nama_cluster?: NullableStringFieldUpdateOperationsInput | string | null
    id_area?: NullableIntFieldUpdateOperationsInput | number | null
    flag_active?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id_sub_areas?: NullableStringFieldUpdateOperationsInput | string | null
    tbl_goals?: tbl_goalsUncheckedUpdateManyWithoutTbl_clusterInput
  }

  export type tbl_clusterCreateManyInput = {
    id_cluster?: number
    nama_cluster?: string | null
    id_area?: number | null
    flag_active?: number | null
    createdAt?: Date | string | null
    modifiedAt?: Date | string | null
    id_sub_areas?: string | null
  }

  export type tbl_clusterUpdateManyMutationInput = {
    nama_cluster?: NullableStringFieldUpdateOperationsInput | string | null
    id_area?: NullableIntFieldUpdateOperationsInput | number | null
    flag_active?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id_sub_areas?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbl_clusterUncheckedUpdateManyInput = {
    id_cluster?: IntFieldUpdateOperationsInput | number
    nama_cluster?: NullableStringFieldUpdateOperationsInput | string | null
    id_area?: NullableIntFieldUpdateOperationsInput | number | null
    flag_active?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id_sub_areas?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type tbl_usersCountOrderByAggregateInput = {
    id_user?: SortOrder
    name?: SortOrder
    pass?: SortOrder
    flag_active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    apps?: SortOrder
    role?: SortOrder
    id_area?: SortOrder
    id_sub_area?: SortOrder
  }

  export type tbl_usersAvgOrderByAggregateInput = {
    id_user?: SortOrder
    id_area?: SortOrder
    id_sub_area?: SortOrder
  }

  export type tbl_usersMaxOrderByAggregateInput = {
    id_user?: SortOrder
    name?: SortOrder
    pass?: SortOrder
    flag_active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    apps?: SortOrder
    role?: SortOrder
    id_area?: SortOrder
    id_sub_area?: SortOrder
  }

  export type tbl_usersMinOrderByAggregateInput = {
    id_user?: SortOrder
    name?: SortOrder
    pass?: SortOrder
    flag_active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    apps?: SortOrder
    role?: SortOrder
    id_area?: SortOrder
    id_sub_area?: SortOrder
  }

  export type tbl_usersSumOrderByAggregateInput = {
    id_user?: SortOrder
    id_area?: SortOrder
    id_sub_area?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type tbl_menuCountOrderByAggregateInput = {
    id_menu?: SortOrder
    menu_name?: SortOrder
    menu_link?: SortOrder
    role?: SortOrder
  }

  export type tbl_menuAvgOrderByAggregateInput = {
    id_menu?: SortOrder
  }

  export type tbl_menuMaxOrderByAggregateInput = {
    id_menu?: SortOrder
    menu_name?: SortOrder
    menu_link?: SortOrder
    role?: SortOrder
  }

  export type tbl_menuMinOrderByAggregateInput = {
    id_menu?: SortOrder
    menu_name?: SortOrder
    menu_link?: SortOrder
    role?: SortOrder
  }

  export type tbl_menuSumOrderByAggregateInput = {
    id_menu?: SortOrder
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type Tbl_clusterRelationFilter = {
    is?: tbl_clusterWhereInput | null
    isNot?: tbl_clusterWhereInput | null
  }

  export type tbl_goalsCountOrderByAggregateInput = {
    id_goals?: SortOrder
    issue_goals?: SortOrder
    title_goals?: SortOrder
    desc_goals?: SortOrder
    pic_goals?: SortOrder
    start_date?: SortOrder
    due_date?: SortOrder
    status_goals?: SortOrder
    progress?: SortOrder
    parent_goals?: SortOrder
    type_goals?: SortOrder
    last_modified_date?: SortOrder
    indikator?: SortOrder
    id_area?: SortOrder
    kodefikasi?: SortOrder
    parent_family?: SortOrder
    id_cluster?: SortOrder
  }

  export type tbl_goalsAvgOrderByAggregateInput = {
    id_goals?: SortOrder
    status_goals?: SortOrder
    progress?: SortOrder
    parent_goals?: SortOrder
    id_area?: SortOrder
    parent_family?: SortOrder
    id_cluster?: SortOrder
  }

  export type tbl_goalsMaxOrderByAggregateInput = {
    id_goals?: SortOrder
    issue_goals?: SortOrder
    title_goals?: SortOrder
    desc_goals?: SortOrder
    pic_goals?: SortOrder
    start_date?: SortOrder
    due_date?: SortOrder
    status_goals?: SortOrder
    progress?: SortOrder
    parent_goals?: SortOrder
    last_modified_date?: SortOrder
    id_area?: SortOrder
    kodefikasi?: SortOrder
    parent_family?: SortOrder
    id_cluster?: SortOrder
  }

  export type tbl_goalsMinOrderByAggregateInput = {
    id_goals?: SortOrder
    issue_goals?: SortOrder
    title_goals?: SortOrder
    desc_goals?: SortOrder
    pic_goals?: SortOrder
    start_date?: SortOrder
    due_date?: SortOrder
    status_goals?: SortOrder
    progress?: SortOrder
    parent_goals?: SortOrder
    last_modified_date?: SortOrder
    id_area?: SortOrder
    kodefikasi?: SortOrder
    parent_family?: SortOrder
    id_cluster?: SortOrder
  }

  export type tbl_goalsSumOrderByAggregateInput = {
    id_goals?: SortOrder
    status_goals?: SortOrder
    progress?: SortOrder
    parent_goals?: SortOrder
    id_area?: SortOrder
    parent_family?: SortOrder
    id_cluster?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
    _count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
  }

  export type mst_areaCountOrderByAggregateInput = {
    id_area?: SortOrder
    id_sub_area?: SortOrder
    desc_area?: SortOrder
    desc_sub_area?: SortOrder
    id_parent_area?: SortOrder
    active?: SortOrder
  }

  export type mst_areaAvgOrderByAggregateInput = {
    id_area?: SortOrder
    id_sub_area?: SortOrder
    id_parent_area?: SortOrder
    active?: SortOrder
  }

  export type mst_areaMaxOrderByAggregateInput = {
    id_area?: SortOrder
    id_sub_area?: SortOrder
    desc_area?: SortOrder
    desc_sub_area?: SortOrder
    id_parent_area?: SortOrder
    active?: SortOrder
  }

  export type mst_areaMinOrderByAggregateInput = {
    id_area?: SortOrder
    id_sub_area?: SortOrder
    desc_area?: SortOrder
    desc_sub_area?: SortOrder
    id_parent_area?: SortOrder
    active?: SortOrder
  }

  export type mst_areaSumOrderByAggregateInput = {
    id_area?: SortOrder
    id_sub_area?: SortOrder
    id_parent_area?: SortOrder
    active?: SortOrder
  }

  export type Tbl_goalsListRelationFilter = {
    every?: tbl_goalsWhereInput
    some?: tbl_goalsWhereInput
    none?: tbl_goalsWhereInput
  }

  export type tbl_goalsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tbl_clusterCountOrderByAggregateInput = {
    id_cluster?: SortOrder
    nama_cluster?: SortOrder
    id_area?: SortOrder
    flag_active?: SortOrder
    createdAt?: SortOrder
    modifiedAt?: SortOrder
    id_sub_areas?: SortOrder
  }

  export type tbl_clusterAvgOrderByAggregateInput = {
    id_cluster?: SortOrder
    id_area?: SortOrder
    flag_active?: SortOrder
  }

  export type tbl_clusterMaxOrderByAggregateInput = {
    id_cluster?: SortOrder
    nama_cluster?: SortOrder
    id_area?: SortOrder
    flag_active?: SortOrder
    createdAt?: SortOrder
    modifiedAt?: SortOrder
    id_sub_areas?: SortOrder
  }

  export type tbl_clusterMinOrderByAggregateInput = {
    id_cluster?: SortOrder
    nama_cluster?: SortOrder
    id_area?: SortOrder
    flag_active?: SortOrder
    createdAt?: SortOrder
    modifiedAt?: SortOrder
    id_sub_areas?: SortOrder
  }

  export type tbl_clusterSumOrderByAggregateInput = {
    id_cluster?: SortOrder
    id_area?: SortOrder
    flag_active?: SortOrder
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type tbl_clusterCreateNestedOneWithoutTbl_goalsInput = {
    create?: XOR<tbl_clusterCreateWithoutTbl_goalsInput, tbl_clusterUncheckedCreateWithoutTbl_goalsInput>
    connectOrCreate?: tbl_clusterCreateOrConnectWithoutTbl_goalsInput
    connect?: tbl_clusterWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type tbl_clusterUpdateOneWithoutTbl_goalsInput = {
    create?: XOR<tbl_clusterCreateWithoutTbl_goalsInput, tbl_clusterUncheckedCreateWithoutTbl_goalsInput>
    connectOrCreate?: tbl_clusterCreateOrConnectWithoutTbl_goalsInput
    upsert?: tbl_clusterUpsertWithoutTbl_goalsInput
    disconnect?: boolean
    delete?: boolean
    connect?: tbl_clusterWhereUniqueInput
    update?: XOR<tbl_clusterUpdateWithoutTbl_goalsInput, tbl_clusterUncheckedUpdateWithoutTbl_goalsInput>
  }

  export type tbl_goalsCreateNestedManyWithoutTbl_clusterInput = {
    create?: XOR<Enumerable<tbl_goalsCreateWithoutTbl_clusterInput>, Enumerable<tbl_goalsUncheckedCreateWithoutTbl_clusterInput>>
    connectOrCreate?: Enumerable<tbl_goalsCreateOrConnectWithoutTbl_clusterInput>
    createMany?: tbl_goalsCreateManyTbl_clusterInputEnvelope
    connect?: Enumerable<tbl_goalsWhereUniqueInput>
  }

  export type tbl_goalsUncheckedCreateNestedManyWithoutTbl_clusterInput = {
    create?: XOR<Enumerable<tbl_goalsCreateWithoutTbl_clusterInput>, Enumerable<tbl_goalsUncheckedCreateWithoutTbl_clusterInput>>
    connectOrCreate?: Enumerable<tbl_goalsCreateOrConnectWithoutTbl_clusterInput>
    createMany?: tbl_goalsCreateManyTbl_clusterInputEnvelope
    connect?: Enumerable<tbl_goalsWhereUniqueInput>
  }

  export type tbl_goalsUpdateManyWithoutTbl_clusterInput = {
    create?: XOR<Enumerable<tbl_goalsCreateWithoutTbl_clusterInput>, Enumerable<tbl_goalsUncheckedCreateWithoutTbl_clusterInput>>
    connectOrCreate?: Enumerable<tbl_goalsCreateOrConnectWithoutTbl_clusterInput>
    upsert?: Enumerable<tbl_goalsUpsertWithWhereUniqueWithoutTbl_clusterInput>
    createMany?: tbl_goalsCreateManyTbl_clusterInputEnvelope
    set?: Enumerable<tbl_goalsWhereUniqueInput>
    disconnect?: Enumerable<tbl_goalsWhereUniqueInput>
    delete?: Enumerable<tbl_goalsWhereUniqueInput>
    connect?: Enumerable<tbl_goalsWhereUniqueInput>
    update?: Enumerable<tbl_goalsUpdateWithWhereUniqueWithoutTbl_clusterInput>
    updateMany?: Enumerable<tbl_goalsUpdateManyWithWhereWithoutTbl_clusterInput>
    deleteMany?: Enumerable<tbl_goalsScalarWhereInput>
  }

  export type tbl_goalsUncheckedUpdateManyWithoutTbl_clusterInput = {
    create?: XOR<Enumerable<tbl_goalsCreateWithoutTbl_clusterInput>, Enumerable<tbl_goalsUncheckedCreateWithoutTbl_clusterInput>>
    connectOrCreate?: Enumerable<tbl_goalsCreateOrConnectWithoutTbl_clusterInput>
    upsert?: Enumerable<tbl_goalsUpsertWithWhereUniqueWithoutTbl_clusterInput>
    createMany?: tbl_goalsCreateManyTbl_clusterInputEnvelope
    set?: Enumerable<tbl_goalsWhereUniqueInput>
    disconnect?: Enumerable<tbl_goalsWhereUniqueInput>
    delete?: Enumerable<tbl_goalsWhereUniqueInput>
    connect?: Enumerable<tbl_goalsWhereUniqueInput>
    update?: Enumerable<tbl_goalsUpdateWithWhereUniqueWithoutTbl_clusterInput>
    updateMany?: Enumerable<tbl_goalsUpdateManyWithWhereWithoutTbl_clusterInput>
    deleteMany?: Enumerable<tbl_goalsScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: JsonNullValueFilter | InputJsonValue
    not?: JsonNullValueFilter | InputJsonValue
  }

  export type tbl_clusterCreateWithoutTbl_goalsInput = {
    nama_cluster?: string | null
    id_area?: number | null
    flag_active?: number | null
    createdAt?: Date | string | null
    modifiedAt?: Date | string | null
    id_sub_areas?: string | null
  }

  export type tbl_clusterUncheckedCreateWithoutTbl_goalsInput = {
    id_cluster?: number
    nama_cluster?: string | null
    id_area?: number | null
    flag_active?: number | null
    createdAt?: Date | string | null
    modifiedAt?: Date | string | null
    id_sub_areas?: string | null
  }

  export type tbl_clusterCreateOrConnectWithoutTbl_goalsInput = {
    where: tbl_clusterWhereUniqueInput
    create: XOR<tbl_clusterCreateWithoutTbl_goalsInput, tbl_clusterUncheckedCreateWithoutTbl_goalsInput>
  }

  export type tbl_clusterUpsertWithoutTbl_goalsInput = {
    update: XOR<tbl_clusterUpdateWithoutTbl_goalsInput, tbl_clusterUncheckedUpdateWithoutTbl_goalsInput>
    create: XOR<tbl_clusterCreateWithoutTbl_goalsInput, tbl_clusterUncheckedCreateWithoutTbl_goalsInput>
  }

  export type tbl_clusterUpdateWithoutTbl_goalsInput = {
    nama_cluster?: NullableStringFieldUpdateOperationsInput | string | null
    id_area?: NullableIntFieldUpdateOperationsInput | number | null
    flag_active?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id_sub_areas?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbl_clusterUncheckedUpdateWithoutTbl_goalsInput = {
    id_cluster?: IntFieldUpdateOperationsInput | number
    nama_cluster?: NullableStringFieldUpdateOperationsInput | string | null
    id_area?: NullableIntFieldUpdateOperationsInput | number | null
    flag_active?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    modifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id_sub_areas?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tbl_goalsCreateWithoutTbl_clusterInput = {
    issue_goals?: string | null
    title_goals?: string | null
    desc_goals?: string | null
    pic_goals?: string | null
    start_date?: Date | string | null
    due_date?: Date | string | null
    status_goals?: number | null
    progress?: number | null
    parent_goals?: number | null
    type_goals?: NullableJsonNullValueInput | InputJsonValue
    last_modified_date?: Date | string | null
    indikator?: NullableJsonNullValueInput | InputJsonValue
    id_area?: number | null
    kodefikasi?: string | null
    parent_family?: number | null
  }

  export type tbl_goalsUncheckedCreateWithoutTbl_clusterInput = {
    id_goals?: number
    issue_goals?: string | null
    title_goals?: string | null
    desc_goals?: string | null
    pic_goals?: string | null
    start_date?: Date | string | null
    due_date?: Date | string | null
    status_goals?: number | null
    progress?: number | null
    parent_goals?: number | null
    type_goals?: NullableJsonNullValueInput | InputJsonValue
    last_modified_date?: Date | string | null
    indikator?: NullableJsonNullValueInput | InputJsonValue
    id_area?: number | null
    kodefikasi?: string | null
    parent_family?: number | null
  }

  export type tbl_goalsCreateOrConnectWithoutTbl_clusterInput = {
    where: tbl_goalsWhereUniqueInput
    create: XOR<tbl_goalsCreateWithoutTbl_clusterInput, tbl_goalsUncheckedCreateWithoutTbl_clusterInput>
  }

  export type tbl_goalsCreateManyTbl_clusterInputEnvelope = {
    data: Enumerable<tbl_goalsCreateManyTbl_clusterInput>
    skipDuplicates?: boolean
  }

  export type tbl_goalsUpsertWithWhereUniqueWithoutTbl_clusterInput = {
    where: tbl_goalsWhereUniqueInput
    update: XOR<tbl_goalsUpdateWithoutTbl_clusterInput, tbl_goalsUncheckedUpdateWithoutTbl_clusterInput>
    create: XOR<tbl_goalsCreateWithoutTbl_clusterInput, tbl_goalsUncheckedCreateWithoutTbl_clusterInput>
  }

  export type tbl_goalsUpdateWithWhereUniqueWithoutTbl_clusterInput = {
    where: tbl_goalsWhereUniqueInput
    data: XOR<tbl_goalsUpdateWithoutTbl_clusterInput, tbl_goalsUncheckedUpdateWithoutTbl_clusterInput>
  }

  export type tbl_goalsUpdateManyWithWhereWithoutTbl_clusterInput = {
    where: tbl_goalsScalarWhereInput
    data: XOR<tbl_goalsUpdateManyMutationInput, tbl_goalsUncheckedUpdateManyWithoutTbl_goalsInput>
  }

  export type tbl_goalsScalarWhereInput = {
    AND?: Enumerable<tbl_goalsScalarWhereInput>
    OR?: Enumerable<tbl_goalsScalarWhereInput>
    NOT?: Enumerable<tbl_goalsScalarWhereInput>
    id_goals?: IntFilter | number
    issue_goals?: StringNullableFilter | string | null
    title_goals?: StringNullableFilter | string | null
    desc_goals?: StringNullableFilter | string | null
    pic_goals?: StringNullableFilter | string | null
    start_date?: DateTimeNullableFilter | Date | string | null
    due_date?: DateTimeNullableFilter | Date | string | null
    status_goals?: IntNullableFilter | number | null
    progress?: IntNullableFilter | number | null
    parent_goals?: IntNullableFilter | number | null
    type_goals?: JsonNullableFilter
    last_modified_date?: DateTimeNullableFilter | Date | string | null
    indikator?: JsonNullableFilter
    id_area?: IntNullableFilter | number | null
    kodefikasi?: StringNullableFilter | string | null
    parent_family?: IntNullableFilter | number | null
    id_cluster?: IntNullableFilter | number | null
  }

  export type tbl_goalsCreateManyTbl_clusterInput = {
    id_goals?: number
    issue_goals?: string | null
    title_goals?: string | null
    desc_goals?: string | null
    pic_goals?: string | null
    start_date?: Date | string | null
    due_date?: Date | string | null
    status_goals?: number | null
    progress?: number | null
    parent_goals?: number | null
    type_goals?: NullableJsonNullValueInput | InputJsonValue
    last_modified_date?: Date | string | null
    indikator?: NullableJsonNullValueInput | InputJsonValue
    id_area?: number | null
    kodefikasi?: string | null
    parent_family?: number | null
  }

  export type tbl_goalsUpdateWithoutTbl_clusterInput = {
    issue_goals?: NullableStringFieldUpdateOperationsInput | string | null
    title_goals?: NullableStringFieldUpdateOperationsInput | string | null
    desc_goals?: NullableStringFieldUpdateOperationsInput | string | null
    pic_goals?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status_goals?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: NullableIntFieldUpdateOperationsInput | number | null
    parent_goals?: NullableIntFieldUpdateOperationsInput | number | null
    type_goals?: NullableJsonNullValueInput | InputJsonValue
    last_modified_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    indikator?: NullableJsonNullValueInput | InputJsonValue
    id_area?: NullableIntFieldUpdateOperationsInput | number | null
    kodefikasi?: NullableStringFieldUpdateOperationsInput | string | null
    parent_family?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type tbl_goalsUncheckedUpdateWithoutTbl_clusterInput = {
    id_goals?: IntFieldUpdateOperationsInput | number
    issue_goals?: NullableStringFieldUpdateOperationsInput | string | null
    title_goals?: NullableStringFieldUpdateOperationsInput | string | null
    desc_goals?: NullableStringFieldUpdateOperationsInput | string | null
    pic_goals?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status_goals?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: NullableIntFieldUpdateOperationsInput | number | null
    parent_goals?: NullableIntFieldUpdateOperationsInput | number | null
    type_goals?: NullableJsonNullValueInput | InputJsonValue
    last_modified_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    indikator?: NullableJsonNullValueInput | InputJsonValue
    id_area?: NullableIntFieldUpdateOperationsInput | number | null
    kodefikasi?: NullableStringFieldUpdateOperationsInput | string | null
    parent_family?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type tbl_goalsUncheckedUpdateManyWithoutTbl_goalsInput = {
    id_goals?: IntFieldUpdateOperationsInput | number
    issue_goals?: NullableStringFieldUpdateOperationsInput | string | null
    title_goals?: NullableStringFieldUpdateOperationsInput | string | null
    desc_goals?: NullableStringFieldUpdateOperationsInput | string | null
    pic_goals?: NullableStringFieldUpdateOperationsInput | string | null
    start_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status_goals?: NullableIntFieldUpdateOperationsInput | number | null
    progress?: NullableIntFieldUpdateOperationsInput | number | null
    parent_goals?: NullableIntFieldUpdateOperationsInput | number | null
    type_goals?: NullableJsonNullValueInput | InputJsonValue
    last_modified_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    indikator?: NullableJsonNullValueInput | InputJsonValue
    id_area?: NullableIntFieldUpdateOperationsInput | number | null
    kodefikasi?: NullableStringFieldUpdateOperationsInput | string | null
    parent_family?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}